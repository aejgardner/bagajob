{"version":3,"sources":["components/PrivateRoute.js","components/Nav.js","components/Home.js","data/axios.js","data/Auth/actions.js","data/ApiRequests/auth.js","data/Auth/constants.js","helpers/validateAuth.js","customHooks/useFormValidation.js","components/AuthForms/Login.js","components/AuthForms/SignUp.js","components/AuthForms/Logout.js","components/AuthForms/ForgotPassword.js","components/AuthForms/PasswordReset.js","data/Jobs/actions.js","data/ApiRequests/jobs.js","data/Jobs/constants.js","components/MainPage/StageTracker.js","components/MainPage/JobPreview.js","data/AppNotes/actions.js","data/ApiRequests/appNotes.js","data/AppNotes/constants.js","data/Interviews/actions.js","data/ApiRequests/interviews.js","data/Interviews/constants.js","helpers/dateToday.js","components/JobForms/JobDetailsForm.js","components/JobForms/ApplicationDetailsForm.js","components/JobForms/InterviewDetailsForm.js","components/JobForms/JobForms.js","components/MainPage/MainPage.js","components/Loading.js","components/Job/JobDetailsCard/JobDetail.js","components/Job/JobDetailsCard/index.js","components/Job/ApplicationCard/ApplicationInput.js","components/Job/ApplicationCard/ApplicationNote.js","components/Job/ApplicationCard/index.js","components/Job/InterviewCard/Interview.js","components/Job/InterviewCard/index.js","components/Job/Job.js","components/Account/AccountHeader.js","data/Account/actions.js","data/ApiRequests/account.js","data/Account/constants.js","components/Account/AccountDetail.js","components/Account/Account.js","components/FourOhFour.js","components/App.js","data/Jobs/reducer.js","data/Auth/reducer.js","data/Account/reducer.js","data/AppNotes/reducer.js","data/Interviews/reducer.js","data/RootReducer.js","data/store.js","index.js","assets/images/done-24px.svg","assets/images/email_icon.svg","assets/images/lock_icon.svg","assets/images/add-task-24px.svg","assets/images/timeline-24px.svg","assets/images/work-24px.svg"],"names":["PrivateRoute","Component","component","rest","access_token","useSelector","state","user","render","props","to","pathname","Nav","name","initials","split","map","n","join","toUpperCase","className","href","Home","type","id","src","require","alt","axios","create","baseURL","headers","Accept","signUp","data","history","dispatch","Promise","resolve","reject","signUpRequest","post","apiSignUp","then","successResponse","signUpSuccess","setTimeout","push","catch","errorResponse","signUpFailure","payload","error","login","loginRequest","login_data","username","email","password","apiLogin","loginSuccess","loginFailure","forgotPasswordInit","forgotPasswordInitRequest","apiForgotPasswordInit","forgotPasswordInitSuccess","forgotPasswordInitFailure","passwordReset","passwordResetRequest","apiPasswordReset","passwordResetSuccess","passwordResetFailure","validateAuth","values","errors","test","length","useFormValidation","initialState","authAction","useState","setValues","setErrors","isSubmitting","setSubmitting","useDispatch","useEffect","Object","keys","handleSubmit","e","preventDefault","validationErrors","validate","handleChange","target","value","Login","authResponse","onSubmit","email_icon","placeholder","onChange","lock_icon","disabled","SignUp","loaded","authErrors","message","Logout","onClick","checkmark","ForgotPassword","style","height","display","flexDirection","justifyContent","alignItems","PasswordReset","setPassword","confirmPassword","setConfirmPassword","lengthWarning","setLengthWarning","matchWarning","setMatchWarning","useQueryParam","StringParam","token","getJobs","getJobsRequest","user_id","get","apiGetJobs","getJobsSuccess","getJobsFailure","getSingleJob","getJobRequest","job_id","apiGetJob","getJobSuccess","getJobFailure","addJob","addJobRequest","job_data","apiAddJob","addJobSuccess","addJobFailure","updateJob","updateJobRequest","patch","apiUpdateJob","updateJobSuccess","updateJobFailure","deleteJob","deleteJobRequest","delete","apiDeleteJob","deleteJobSuccess","deleteJobFailure","StageTracker","selected","handleClick","label","title","company","active","currentStage","stage","JobPreview","job","current","setCurrent","addAppNote","addAppNoteRequest","notes_data","apiAddAppNote","addAppNoteSuccess","addAppNoteFailure","updateAppNote","updateAppNoteRequest","note_id","note_data","apiUpdateAppNote","updateAppNoteSuccess","updateAppNoteFailure","deleteAppNote","deleteAppNoteRequest","apiDeleteAppNote","deleteAppNoteSuccess","deleteAppNoteFailure","addInterview","addInterviewRequest","interview_data","apiAddInterview","addInterviewSuccess","addInterviewFailure","updateInterview","updateInterviewRequest","interview_id","apiUpdateInterview","updateInterviewSuccess","updateInterviewFailure","deleteInterview","deleteInterviewRequest","apiDeleteInterview","deleteInterviewSuccess","deleteInterviewFailure","dateToday","today","Date","dd","String","getDate","padStart","mm","getMonth","getFullYear","JobDetailsForm","currentStep","nextStep","handleJobChange","handleFirstSubmit","htmlFor","required","salary","location","date_applied","closing_date","description","ApplicationDetailsForm","prevStep","handleAppChange","InterviewDetailsForm","handleSecondSubmit","handleInterviewChange","handleInterviewFormat","interview_date","interview_format","interviewer","cols","rows","notes","jobFormReducer","action","fieldName","interview","format","application_notes","step","cv","cover_letter","date","JobForm","useReducer","dispatchAction","firstFormValues","secondFormValues","thirdFormValues","form_data","MainPage","showModal","setOpen","jobs","closeModal","index","key","isOpen","onClose","onRequestClose","JobForms","Loading","JobDetail","inputType","jobProperty","jobInputValue","setJobInputValue","editing","setEditing","JobDetailsCard","border","padding","ApplicationInput","appCardInput","inputValue","setInput","ApplicationNote","applicationNote","note","setNote","ApplicationCard","Interview","interviewDate","setInterviewDate","setFormat","setInterviewer","setNotes","InterviewCard","interviews","i","Job","match","params","width","margin","AccountHeader","updateAccount","updateAccountRequest","account_data","apiUpdateAccount","updateAccountSuccess","updateAccountFailure","deleteAccount","deleteAccountRequest","apiDeleteAccount","deleteAccountSuccess","deleteAccountFailure","AccountDetail","accountDetailName","accountInputValue","setAccountInputValue","Account","gridTemplateColumns","FourOhFour","goBack","App","ReactRouterRoute","Route","exact","path","filter","success","salaray","token_type","expires_in","refresh_token","created_at","RootReducer","JobReducer","AuthReducer","AccountReducer","AppNotesReducer","InterviewsReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","persistState","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.66fb9637.chunk.js","sourcesContent":["import React from 'react';\nimport { Route, Redirect } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n    const access_token = useSelector(state => state.user.access_token)\n\n    return (\n        <Route {...rest} render={props => (\n            access_token ?\n                <Component {...props} />\n                : <Redirect to={{ pathname: '/home' }} />\n        )} />\n    )\n}\n\nexport default PrivateRoute","import React from 'react'\nimport { Link } from \"react-router-dom\"\nimport { useSelector } from 'react-redux'\n\nconst Nav = () => {\n    const { name } = useSelector(state => state) \n    const initials = name.split(\" \").map((n)=>n[0]).join(\"\").toUpperCase()\n    const access_token = useSelector(state => state.user.access_token)\n    return (\n        <>\n        <nav className=\"navbar\">\n            <Link to=\"/home/\">\n                <h1 className=\"navbar-brand\">bagajob</h1>\n            </Link>\n\n        { access_token && name !== \"\" ?\n        <>   \n            <div className=\"dropdown\">\n                <button className=\"dropbtn\">\n                    { initials }\n                </button>\n                <div className=\"dropdown-content\">\n                <Link to=\"/mainpage\"><p href=\"#\">My Applications</p></Link>\n                <Link to=\"/account\"> <p href=\"#\">My Account</p></Link>\n                <Link to=\"/home/logout\"> <p href=\"#\">Logout</p></Link>\n                </div>\n            </div>\n            </>\n        :\n        null }\n        </nav>\n\n        </>\n    );\n};\n\nexport default Nav;","import React from 'react'\nimport { Link } from \"react-router-dom\"\nimport Nav from './Nav'\n\nconst Home = () => {\n    return (\n        <>\n        <Nav />\n            <Link to=\"/home/\">\n                <h1 className=\"brand-title\">bagajob</h1>\n            </Link>\n            <h3 className=\"brand-text\">\n                Track job applications from start to finish\n            </h3>\n            <div className=\"button-container\">\n            <Link to=\"/home/signup\">\n                    <button className=\"secondarybtn signup-btn-home\" type=\"submit\" id=\"\">\n                        SIGN UP\n                    </button>  \n                </Link>\n                <Link to=\"/home/login\">\n                    <button className=\"primarybtn login-btn-home\" type=\"submit\" id=\"\">\n                        LOG IN\n                    </button>\n                </Link>\n            </div>\n            <div className=\"home-info-container\">\n                <div className=\"home-image-container home-image-first\">\n                    <img className=\"home-image\" src={ require('../assets/images/add-task-24px.svg') } alt=\"A simple icon image indicating task management\"></img>\n                </div>\n                <div className=\"home-text-container home-text-first\">\n                    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.  </p>\n                </div>\n                <div className=\"home-image-container home-image-second\">\n                    <img className=\"home-image\" src={ require('../assets/images/timeline-24px.svg') } alt=\"A simple icon image indicating task management\"></img>\n                </div>\n                <div className=\"home-text-container home-text-second\">\n                    <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. </p>\n                </div>\n                <div className=\"home-image-container home-image-third\">\n                    <img className=\"home-image\" src={ require('../assets/images/work-24px.svg') } alt=\"A simple icon image indicating task management\"></img>\n                </div>\n                <div className=\"home-text-container home-text-third\">\n                    <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</p>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Home;","import axios from \"axios\";\n\nexport default axios.create({\n    // Deployment baseURL:\n    // baseURL: \"https://bagajob-api.developme.space/api/\",\n    // Development baseURL:\n    baseURL: \"http://homestead.test/api\",\n    // Headers:\n    headers: {\n        Accept: \"application/json\",\n    },\n});","import {\n    signUp as apiSignUp,\n    login as apiLogin,\n    forgotPasswordInit as apiForgotPasswordInit,\n    passwordReset as apiPasswordReset\n} from '../ApiRequests/auth'\n\nimport {\n    RESET_AUTH_RESPONSE,\n    RESET_ERRORS,\n    SIGNUP_POST_REQUEST,\n    SIGNUP_POST_SUCCESS,\n    SIGNUP_POST_FAILURE,\n    LOGIN_POST_REQUEST,\n    LOGIN_POST_SUCCESS,\n    LOGIN_POST_FAILURE,\n    FORGOT_PASSWORD_INIT_POST_REQUEST,\n    FORGOT_PASSWORD_INIT_POST_SUCCESS,\n    FORGOT_PASSWORD_INIT_POST_FAILURE,\n    PASSWORD_RESET_POST_REQUEST,\n    PASSWORD_RESET_POST_SUCCESS,\n    PASSWORD_RESET_POST_FAILURE,\n    LOGOUT\n} from './constants'\n\n// sign up user then redirect them to mainpage\nexport const signUp = (data, history) => dispatch => {\n    return new Promise((resolve, reject) => {\n        dispatch(signUpRequest())\n        apiSignUp(data)\n            .then(successResponse => {\n                dispatch(signUpSuccess(successResponse))\n                setTimeout(() => {\n                    history.push(\"/mainpage\");\n                }, 300)\n                resolve(successResponse)\n            })\n            .catch(errorResponse => {\n                dispatch(signUpFailure(errorResponse))\n            })\n    })\n}\n\nconst signUpRequest = () => dispatch => (\n    dispatch({\n        type: SIGNUP_POST_REQUEST\n    })\n)\n\nconst signUpSuccess = data => dispatch => (\n    dispatch({\n        type: SIGNUP_POST_SUCCESS,\n        payload: data\n    })\n)\n\nconst signUpFailure = error => dispatch => (\n    dispatch({\n        type: SIGNUP_POST_FAILURE,\n        payload: error\n    })\n)\n\n// login user\nexport const login = (data, history) => dispatch => {\n    return new Promise((resolve, reject) => {\n        dispatch(loginRequest())\n        apiLogin(data)\n            .then(successResponse => {\n                dispatch(loginSuccess(successResponse))\n                setTimeout(() => {\n                    history.push(\"/mainpage\");\n                }, 300)\n                resolve(successResponse)\n            })\n            .catch(errorResponse => {\n                dispatch(loginFailure(errorResponse))\n            })\n    })\n}\n\nconst loginRequest = () => dispatch => (\n    dispatch({\n        type: LOGIN_POST_REQUEST\n    })\n)\n\nconst loginSuccess = data => dispatch => (\n    dispatch({\n        type: LOGIN_POST_SUCCESS,\n        payload: data.data\n    })\n)\n\nconst loginFailure = error => dispatch => (\n    dispatch({\n        type: LOGIN_POST_FAILURE,\n        payload: error\n    })\n)\n\n// forgot password initial request\nexport const forgotPasswordInit = data => dispatch => {\n    return new Promise((resolve, reject) => {\n        dispatch(forgotPasswordInitRequest())\n        apiForgotPasswordInit(data)\n            .then(successResponse => {\n                dispatch(forgotPasswordInitSuccess(successResponse))\n                resolve(successResponse)\n            })\n            .catch(errorResponse => {\n                dispatch(forgotPasswordInitFailure(errorResponse))\n            })\n    })\n}\n\nconst forgotPasswordInitRequest = () => dispatch => (\n    dispatch({\n        type: FORGOT_PASSWORD_INIT_POST_REQUEST\n    })\n)\n\nconst forgotPasswordInitSuccess = data => dispatch => (\n    dispatch({\n        type: FORGOT_PASSWORD_INIT_POST_SUCCESS,\n        payload: data\n    })\n)\n\nconst forgotPasswordInitFailure = error => dispatch => (\n    dispatch({\n        type: FORGOT_PASSWORD_INIT_POST_FAILURE,\n        payload: error\n    })\n)\n\n// password reset request\nexport const passwordReset = (data) => dispatch => {\n    return new Promise((resolve, reject) => {\n        dispatch(passwordResetRequest())\n        apiPasswordReset(data)\n            .then(successResponse => {\n                dispatch(passwordResetSuccess(successResponse))\n                resolve(successResponse)\n            })\n            .catch(errorResponse => {\n                dispatch(passwordResetFailure(errorResponse))\n            })\n    })\n}\n\nconst passwordResetRequest = () => dispatch => (\n    dispatch({\n        type: PASSWORD_RESET_POST_REQUEST\n    })\n)\n\nconst passwordResetSuccess = data => dispatch => (\n    dispatch({\n        type: PASSWORD_RESET_POST_SUCCESS,\n        payload: data\n    })\n)\n\nconst passwordResetFailure = error => dispatch => (\n    dispatch({\n        type: PASSWORD_RESET_POST_FAILURE,\n        payload: error\n    })\n)\n\n// reset authResponse\nexport const resetAuthResponse = () => dispatch => {\n    dispatch({\n        type: RESET_AUTH_RESPONSE\n    })\n}\n\n// reset errors\nexport const resetErrors = () => dispatch => {\n    dispatch({\n        type: RESET_ERRORS\n    })\n}\n\n// Log Out\nexport const logout = () => dispatch => {\n    dispatch({\n        type: LOGOUT\n    })\n}","import axios from '../axios'\n\n// sign up user post request\nexport const signUp = data => {\n    const { access_token } = data\n    return axios.post('register', data, {\n        headers: {\n            'Authorization': `Bearer ${access_token}`\n        }\n    })\n}\n\n// login user post request\nexport const login = data => {\n    const login_data = {\n        username: data.email,\n        password: data.password\n    }\n    return axios.post('login', login_data)\n}\n\n// initial forgot password post request, responds with an email to the user\nexport const forgotPasswordInit = data => {\n    return axios.post('reset-password-without-token', data)\n}\n\n// password reset request with password reset token\nexport const passwordReset = data => {\n    return axios.post('reset-password-with-token', data)\n}","// clear authResponse from global state\nexport const RESET_AUTH_RESPONSE = 'RESET_AUTH_RESPONSE'\n\n// clear errors from global state\nexport const RESET_ERRORS = 'RESET_ERRORS'\n\n// signup post request\nexport const SIGNUP_POST_REQUEST = 'SIGNUP_POST_REQUEST'\n\nexport const SIGNUP_POST_SUCCESS = 'SIGNUP_POST_SUCCESS'\n\nexport const SIGNUP_POST_FAILURE = 'SIGNUP_POST_FAILURE'\n\n// login post request\nexport const LOGIN_POST_REQUEST = 'LOGIN_POST_REQUEST'\n\nexport const LOGIN_POST_SUCCESS = 'LOGIN_POST_SUCCESS'\n\nexport const LOGIN_POST_FAILURE = 'LOGIN_POST_FAILURE'\n\n// logout (no request, clears state)\nexport const LOGOUT = 'LOGOUT'\n\n// initial forgot password post request\nexport const FORGOT_PASSWORD_INIT_POST_REQUEST = 'FORGOT_PASSWORD_INIT_POST_REQUEST'\n\nexport const FORGOT_PASSWORD_INIT_POST_SUCCESS = 'FORGOT_PASSWORD_INIT_POST_SUCCESS'\n\nexport const FORGOT_PASSWORD_INIT_POST_FAILURE = 'FORGOT_PASSWORD_INIT_POST_FAILURE'\n\n// password reset request\nexport const PASSWORD_RESET_POST_REQUEST = 'PASSWORD_RESET_POST_REQUEST'\n\nexport const PASSWORD_RESET_POST_SUCCESS = 'PASSWORD_RESET_POST_SUCCESS'\n\nexport const PASSWORD_RESET_POST_FAILURE = 'PASSWORD_RESET_POST_FAILURE'","const validateAuth = values => {\n    let errors = {}\n    // the nested if statements allow this function to be used for the login form, signup form and password reset form, as they check whether there is a name and password input present. For forms they are not present in, they will be ignored, rather than causing an error saying they haven't been filled out.\n\n    // name errors \n    if ('name' in values) {\n        if (!values.name) {\n            errors.name = \"Please enter a name.\"\n        }\n    }\n    // email errors\n    if (!values.email || !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n        errors.email = \"Please enter a valid email address.\"\n    }\n    // password errors\n    if ('password' in values) {\n        if (!values.password) {\n            errors.password = \"Please enter a password.\"\n        } else if (values.password.length < 6) {\n            errors.password = \"Password must be at least 6 characters.\"\n        }\n    }\n    return errors\n}\n\nexport default validateAuth","import { useState, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { default as validate } from '../helpers/validateAuth'\n\nconst useFormValidation = (initialState, authAction, history) => {\n    const [values, setValues] = useState(initialState)\n    const [errors, setErrors] = useState({})\n    const [isSubmitting, setSubmitting] = useState(false)\n    const dispatch = useDispatch()\n\n    // when the errors state prop is updated, code is run\n    useEffect(() => {\n        if (isSubmitting) {\n            const noErrors = Object.keys(errors).length === 0\n            // signup or login action is only dispatched if there are no errors in form\n            if (noErrors) {\n                dispatch(authAction(values, history))\n                setSubmitting(false)\n            } else {\n                setSubmitting(false)\n            }\n        }\n    }, [errors])\n\n    const handleChange = e => {\n        setValues({\n            ...values,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault()\n        // credentials are passed into validate helper function, returns an error object\n        const validationErrors = validate(values)\n        // errors state prop is updated, invoking the above useEffect()\n        setErrors(validationErrors)\n        // submitting is set to true, disabling the submit button so user can't throttle it\n        setSubmitting(true)\n    }\n\n    return {\n        handleSubmit,\n        handleChange,\n        values,\n        errors,\n        isSubmitting\n    }\n}\n\nexport default useFormValidation","import React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { resetAuthResponse, login } from '../../data/Auth/actions'\nimport useFormValidation from '../../customHooks/useFormValidation'\nimport email_icon from '../../assets/images/email_icon.svg'\nimport lock_icon from '../../assets/images/lock_icon.svg'\nimport Nav from '../Nav'\n\nconst initialState = {\n    email: \"\",\n    password: \"\"\n}\n\nconst Login = ({ history }) => {\n    const { authResponse } = useSelector(state => state)\n    const dispatch = useDispatch()\n    // destructuring the properties returned from the custom hook\n    const {\n        handleSubmit,\n        handleChange,\n        values,\n        errors,\n        isSubmitting\n    } = useFormValidation(initialState, login, history)\n\n    // resets authResponse global state property every time component renders\n    useEffect(() => {\n        dispatch(resetAuthResponse())\n    }, [])\n\n    return (\n        <>\n        <Nav />\n            <div className=\"form-container-small login-container\">\n                <form className=\"login-form\" onSubmit={handleSubmit}>\n                    <div className=\"login-form-input-container\">\n                        <span>\n                            <img\n                                className=\"email-icon\"\n                                src={email_icon}\n                                alt=\"An icon representing an email\"\n                            />\n                        </span>\n                        <input\n                            type=\"email\"\n                            id=\"email\"\n                            name=\"email\"\n                            placeholder=\"Email address\"\n                            value={values.email}\n                            onChange={handleChange}\n                        />\n                    </div>\n                    {errors.email && <p>{errors.email}</p>}\n                    <div className=\"login-form-input-container\">\n                        <span>\n                            <img\n                                className=\"password-icon\"\n                                src={lock_icon}\n                                alt=\"An icon representing a password\"\n                            />\n                        </span>\n                        <input\n                            type=\"password\"\n                            id=\"password\"\n                            name=\"password\"\n                            placeholder=\"Password\"\n                            value={values.password}\n                            onChange={handleChange}\n                        />\n                    </div>\n                    {errors.password && <p>{errors.password}</p>}\n                    <Link\n                        to=\"/forgot-password\"\n                        className=\"login-prompt password-forgot\"\n                    >Forgot password?\n                    </Link>\n                    <button\n                        type=\"submit\"\n                        disabled={isSubmitting}\n                        className=\"primarybtn login-btn\"\n                    >LOG IN\n                    </button>\n                    <Link\n                        to=\"/home/signup\"\n                        className=\"secondarybtn signup-btn\"\n                    >\n                        SIGN UP\n                    </Link>\n                    <b>{authResponse !== null && authResponse}</b>\n                </form>\n            </div>\n        </>\n    )\n}\n\nexport default Login","import React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useFormValidation from \"../../customHooks/useFormValidation\"\nimport { resetAuthResponse, signUp, resetErrors } from '../../data/Auth/actions'\nimport Nav from '../Nav'\n\nconst initialState = {\n    name: \"\",\n    email: \"\",\n    password: \"\"\n}\n\nconst SignUp = ({ history }) => {\n    const { loaded } = useSelector(state => state)\n    const { authResponse } = useSelector(state => state)\n    const authErrors = useSelector(state => state.errors)\n\n    const dispatch = useDispatch()\n\n    // destructuring the properties returned from the custom hook\n    const {\n        handleSubmit,\n        handleChange,\n        values,\n        errors,\n        isSubmitting\n    } = useFormValidation(initialState, signUp, history)\n\n    // resets authResponse global state property every time component renders\n    useEffect(() => {\n        dispatch(resetAuthResponse())\n    }, [])\n\n    // resets errors property in global state every time component renders\n    useEffect(() => {\n        dispatch(resetErrors())\n    }, [])\n\n    return (\n        <>\n        <Nav />\n            <div className=\"form-container-small signup-container\">\n                <form className=\"signup-form\" onSubmit={handleSubmit}>\n                    <div className=\"signup-form-input-container\">\n                        <input\n                            type=\"text\"\n                            id=\"name\"\n                            name=\"name\"\n                            placeholder=\"Full name\"\n                            value={values.name}\n                            onChange={handleChange}\n                        />\n                    </div>\n                    {errors.name && <p className=\"error-text\">{errors.name}</p>}\n                    <div className=\"signup-form-input-container\">\n                        <input\n                            type=\"text\"\n                            id=\"email\"\n                            name=\"email\"\n                            placeholder=\"Email address\"\n                            value={values.email}\n                            onChange={handleChange}\n                        />\n                    </div>\n                    {errors.email && <p className=\"error-text\">{errors.email}</p>}\n                    <div className=\"signup-form-input-container\">\n                        <input\n                            type=\"password\"\n                            id=\"password\"\n                            name=\"password\"\n                            placeholder=\"Password\"\n                            value={values.password}\n                            onChange={handleChange}\n                        />\n                    </div>\n                    {errors.password && <p className=\"error-text\">{errors.password}</p>}\n                    <button\n                        disabled={isSubmitting}\n                        className=\"primarybtn createacc-btn\"\n                        type=\"submit\"\n                    >\n                        CREATE ACCOUNT\n                    </button>\n                    {authResponse !== null && loaded === false ? <p>{authResponse}</p> : null}\n                    {/* the below error can be modified later for a more user friendly message */}\n                    {authErrors !== null ? <p>{authErrors.message}</p> : null}\n                    <p className=\"login-prompt\">\n                        Already have an account? <Link to=\"/home/login\">Log in</Link>\n                    </p>\n                </form>\n            </div>\n        </>\n    )\n}\n\nexport default SignUp","import React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { resetAuthResponse, logout } from '../../data/Auth/actions'\nimport checkmark from '../../assets/images/done-24px.svg'\nimport Nav from '../Nav'\n\nconst Logout = () => {\n    const { authResponse } = useSelector(state => state)\n    const access_token = useSelector(state => state.user.access_token)\n\n    const dispatch = useDispatch()\n\n    // resets authResponse global state property every time component renders\n    useEffect(() => {\n        dispatch(resetAuthResponse())\n    }, [])\n\n    const handleClick= e => {\n        dispatch(logout())\n    }\n\n    return (\n        <>\n        {/* requires styling */}\n        <Nav />\n\n        <div className=\"form-container-small logout-container\">\n\n            { access_token ? \n            <>\n                <h1 className=\"para-header\">Are you sure you want to log out?</h1>\n                <button className=\"primarybtn\" type=\"submit\" onClick={handleClick}>\n                    LOG OUT\n                </button>\n                </>\n                :\n                <>\n                <img className=\"check-icon\" src={checkmark} alt=\"green checkmark\"></img>\n                <h1 className=\"headline\">Logged Out</h1>\n                <Link to=\"/home/login\"> \n                    <button className=\"primarybtn\">\n                        RETURN TO LOGIN\n                    </button>\n                </Link>\n                </>\n                }\n\n            <b>{authResponse !== null && authResponse}</b>\n        </div>\n    </>\n    )\n}\n\nexport default Logout","import React, { useEffect } from 'react'\nimport { forgotPasswordInit, resetAuthResponse, resetErrors } from '../../data/Auth/actions'\nimport useFormValidation from '../../customHooks/useFormValidation'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Nav from '../Nav'\n\nconst initialState = {\n    email: \"\"\n}\n\nconst ForgotPassword = () => {\n    // destructuring the properties returned from the custom hook\n    const {\n        handleSubmit,\n        handleChange,\n        values,\n        errors,\n        isSubmitting\n    } = useFormValidation(initialState, forgotPasswordInit)\n\n    const dispatch = useDispatch()\n    // resets authResponse global state property every time component renders\n    useEffect(() => {\n        dispatch(resetAuthResponse())\n    }, [])\n    // resets errors property in global state every time component renders\n    useEffect(() => {\n        dispatch(resetErrors())\n    }, [])\n    \n    const { authResponse } = useSelector(state => state)\n    const { loaded } = useSelector(state => state)\n\n    return (\n        <>\n        <Nav />\n        <div style={{\n            height: \"100vh\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n        }}>\n            <form onSubmit={handleSubmit}>\n                <h2>Please enter your email, you will then be emailed a link to reset your password.</h2>\n                <input\n                    type=\"email\"\n                    name=\"email\"\n                    value={values.email}\n                    onChange={handleChange}\n                />\n                {errors.email && <p>{errors.email}</p>}\n                <button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                >Submit\n                </button>\n                {authResponse !== null && loaded !== false ? <p>{authResponse}</p> : null}\n            </form>\n        </div>\n        </>\n    )\n}\n\nexport default ForgotPassword","import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { passwordReset } from '../../data/Auth/actions'\nimport { useQueryParam, StringParam } from 'use-query-params'\nimport Nav from '../Nav'\n\nconst PasswordReset = (props) => {\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [lengthWarning, setLengthWarning] = useState(null)\n    const [matchWarning, setMatchWarning] = useState(null)\n    const dispatch = useDispatch()\n\n    // get the email and reset token from the incoming url\n    const [email, setEmail] = useQueryParam('email', StringParam)\n    const [token, setToken] = useQueryParam('token', StringParam)\n\n    const handleSubmit = e => {\n        e.preventDefault()\n\n        if (password.length < 6) {\n            setLengthWarning(\"Password must be at least 6 characters.\")\n        } else if (password !== confirmPassword) {\n            setMatchWarning(\"Passwords must match.\")\n        } else {\n            const data = {\n                email,\n                password,\n                token\n            }\n            dispatch(passwordReset(data))\n        }\n    }\n\n    return (\n        <> <Nav />\n        <form onSubmit={handleSubmit}>\n            <h1>Password Reset</h1>\n            <h3>Please enter your new password (at least 6 characters).</h3>\n            <input\n                type=\"password\"\n                value={password}\n                onChange={e => { setPassword(e.target.value) }}\n            />\n            {lengthWarning !== null && lengthWarning}\n            <h3>Please confirm your new password.</h3>\n            <input\n                type=\"password\"\n                value={confirmPassword}\n                onChange={e => { setConfirmPassword(e.target.value) }}\n            />\n            {matchWarning !== null && matchWarning}\n            <button type=\"submit\">Submit</button>\n        </form> </>\n    )\n}\n\nexport default PasswordReset","import {\n    getJobs as apiGetJobs,\n    addJob as apiAddJob,\n    getJob as apiGetJob,\n    updateJob as apiUpdateJob,\n    deleteJob as apiDeleteJob\n} from '../ApiRequests/jobs'\n\nimport {\n    JOBS_GET_REQUEST,\n    JOBS_GET_SUCCESS,\n    JOBS_GET_FAILURE,\n    SINGLE_JOB_GET_REQUEST,\n    SINGLE_JOB_GET_SUCCESS,\n    SINGLE_JOB_GET_FAILURE,\n    SINGLE_JOB_PATCH_REQUEST,\n    SINGLE_JOB_PATCH_SUCCESS,\n    SINGLE_JOB_PATCH_FAILURE,\n    SINGLE_JOB_POST_REQUEST,\n    SINGLE_JOB_POST_SUCCESS,\n    SINGLE_JOB_POST_FAILURE,\n    SINGLE_JOB_DELETE_REQUEST,\n    SINGLE_JOB_DELETE_SUCCESS,\n    SINGLE_JOB_DELETE_FAILURE\n} from './constants'\n\n// gets all jobs from user's jobs table (only the properties needed for job preview component)\nexport const getJobs = data => dispatch => {\n    return new Promise((resolve, reject) => {\n        dispatch(getJobsRequest()) // modifies value of 'loaded'\n        apiGetJobs(data) // axios \"get\"\n            .then(successResponse => {\n                dispatch(getJobsSuccess(successResponse))\n                resolve(successResponse)\n            })\n            .catch(errorResponse => {\n                dispatch(getJobsFailure(errorResponse))\n            })\n    })\n}\n\nconst getJobsRequest = () => dispatch => (\n    dispatch({\n        type: JOBS_GET_REQUEST,\n    })\n)\n\nconst getJobsSuccess = data => dispatch => (\n    dispatch({\n        type: JOBS_GET_SUCCESS,\n        payload: data.data.data, //three levels deep\n    })\n)\n\nconst getJobsFailure = error => dispatch => (\n    dispatch({\n        type: JOBS_GET_FAILURE,\n        payload: error\n    })\n)\n\n// gets single job from user's jobs table\nexport const getSingleJob = data => dispatch => {\n    // can put if statement to check existing state\n    // typical and good practice to instantiate initial state with a null, allows you to check if something is null, then do the get request, prevents need to then make request\n    return new Promise((resolve, reject) => {\n        dispatch(getJobRequest())\n        apiGetJob(data)\n            .then(successResponse => {\n                dispatch(getJobSuccess(successResponse))\n                resolve(successResponse)\n            })\n            .catch(errorResponse => {\n                dispatch(getJobFailure(errorResponse))\n            })\n    })\n}\n\nconst getJobRequest = () => dispatch => (\n    dispatch({\n        type: SINGLE_JOB_GET_REQUEST\n    })\n)\n\nconst getJobSuccess = data => dispatch => (\n    dispatch({\n        type: SINGLE_JOB_GET_SUCCESS,\n        payload: data\n    })\n)\n\nconst getJobFailure = data => dispatch => (\n    dispatch({\n        type: SINGLE_JOB_GET_FAILURE,\n        payload: data\n    })\n)\n\n// adds new job to user's jobs table\nexport const addJob = data => dispatch => {\n    return new Promise((resolve, reject) => {\n        dispatch(addJobRequest())\n        apiAddJob(data)\n            .then(successResponse => {\n                dispatch(addJobSuccess(successResponse))\n                resolve(successResponse)\n            })\n            .catch(errorResponse => {\n                dispatch(addJobFailure(errorResponse))\n            })\n    })\n}\n\nconst addJobRequest = () => dispatch => (\n    dispatch({\n        type: SINGLE_JOB_POST_REQUEST,\n    })\n)\n\nconst addJobSuccess = data => dispatch => (\n    dispatch({\n        type: SINGLE_JOB_POST_SUCCESS,\n        payload: data\n    })\n)\n\nconst addJobFailure = error => dispatch => (\n    dispatch({\n        type: SINGLE_JOB_POST_FAILURE,\n        payload: error\n    })\n)\n\n// updates details for a single job in user's jobs table\nexport const updateJob = data => dispatch => {\n\n    return new Promise((resolve, reject) => {\n        dispatch(updateJobRequest())\n        apiUpdateJob(data)\n            .then(successResponse => {\n                dispatch(updateJobSuccess(successResponse))\n                resolve(successResponse)\n            })\n            .catch(errorResponse => {\n                dispatch(updateJobFailure(errorResponse))\n            })\n    })\n}\n\nconst updateJobRequest = () => dispatch => (\n    dispatch({\n        type: SINGLE_JOB_PATCH_REQUEST\n    })\n)\n\nconst updateJobSuccess = data => dispatch => {\n    return (\n        dispatch({\n            type: SINGLE_JOB_PATCH_SUCCESS,\n            payload: data\n        })\n)}\n\nconst updateJobFailure = error => dispatch => (\n    dispatch({\n        type: SINGLE_JOB_PATCH_FAILURE,\n        payload: error\n    })\n)\n\n// deletes a single job in user's jobs table\nexport const deleteJob = data => dispatch => {\n    return new Promise((resolve, reject) => {\n        dispatch(deleteJobRequest())\n        apiDeleteJob(data)\n            .then(successResponse => {\n                dispatch(deleteJobSuccess(data.job_id))\n                resolve(successResponse)\n            })\n            .catch(errorResponse => {\n                dispatch(deleteJobFailure(errorResponse))\n            })\n    })\n}\n\nconst deleteJobRequest = () => dispatch => (\n    dispatch({\n        type: SINGLE_JOB_DELETE_REQUEST\n    })\n)\n\nconst deleteJobSuccess = data => dispatch => (\n    dispatch({\n        type: SINGLE_JOB_DELETE_SUCCESS,\n        payload: data\n    })\n)\n\nconst deleteJobFailure = error => dispatch => (\n    dispatch({\n        type: SINGLE_JOB_DELETE_FAILURE,\n        payload: error\n    })\n)","import axios from '../axios'\n\n// jobs get request\nexport const getJobs = data => {\n    const { user_id, access_token } = data \n     return axios.get(`user/${user_id}/jobs`, {\n        headers: {\n            'Authorization': `Bearer ${access_token}`\n        }\n    })\n}\n\n// single job get request\nexport const getJob = data => {\n    const { user_id, job_id, access_token } = data\n    return axios.get(`user/${user_id}/jobs/${job_id}`, {\n        headers: {\n            'Authorization': `Bearer ${access_token}`\n        }\n    })\n}\n\n// single job post request\nexport const addJob = data => {\n    const { user_id, access_token, job_data, } = data\n    return axios.post(`user/${user_id}/jobs`, job_data, {\n        headers: {\n            'Authorization': `Bearer ${access_token}`\n        }\n    })\n}\n\n// single job patch request\nexport const updateJob = data => {\n    const { user_id, job_id, job_data, access_token } = data\n    return axios.patch(`user/${user_id}/jobs/${job_id}`, job_data, {\n        headers: {\n            'Authorization': `Bearer ${access_token}`\n        }\n    })\n}\n\n// single job delete request\nexport const deleteJob = data => {\n    const { user_id, job_id, access_token } = data\n    return axios.delete(`user/${user_id}/jobs/${job_id}`, {\n        headers: {\n            'Authorization': `Bearer ${access_token}`\n        }\n    })\n}","// jobs get request\nexport const JOBS_GET_REQUEST = 'JOBS_GET_REQUEST'\n\nexport const JOBS_GET_SUCCESS = 'JOBS_GET_SUCCESS'\n\nexport const JOBS_GET_FAILURE = 'JOBS_GET_FAILURE'\n\n// single job get request\nexport const SINGLE_JOB_GET_REQUEST = 'SINGLE_JOB_GET_REQUEST'\n\nexport const SINGLE_JOB_GET_SUCCESS = 'SINGLE_JOB_GET_SUCCESS'\n\nexport const SINGLE_JOB_GET_FAILURE = 'SINGLE_JOB_GET_FAILURE'\n\n// job post request\nexport const SINGLE_JOB_POST_REQUEST = 'SINGLE_JOB_POST_REQUEST'\n\nexport const SINGLE_JOB_POST_SUCCESS = 'SINGLE_JOB_POST_SUCCESS'\n\nexport const SINGLE_JOB_POST_FAILURE = 'SINGLE_JOB_POST_FAILURE'\n\n// single job patch request\nexport const SINGLE_JOB_PATCH_REQUEST = 'SINGLE_JOB_PATCH_REQUEST'\n\nexport const SINGLE_JOB_PATCH_SUCCESS = 'SINGLE_JOB_PATCH_SUCCESS'\n\nexport const SINGLE_JOB_PATCH_FAILURE = 'SINGLE_JOB_PATCH_FAILURE'\n\n// single job delete request\nexport const SINGLE_JOB_DELETE_REQUEST = 'SINGLE_JOB_DELETE_REQUEST'\n\nexport const SINGLE_JOB_DELETE_SUCCESS = 'SINGLE_JOB_DELETE_SUCCESS'\n\nexport const SINGLE_JOB_DELETE_FAILURE = 'SINGLE_JOB_DELETE_FAILURE'","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { updateJob } from '../../data/Jobs/actions'\n\nconst StageTracker = ({ job_id, selected, handleClick, label, value, title, company, active }) => {\n\n    const user_id = useSelector(state => state.user_id)\n    const access_token = useSelector(state => state.access_token)\n    const dispatch = useDispatch()\n\n    const handleUpdateStage = () => {\n        const data = {\n            user_id,\n            job_id,\n            job_data: {\n                title,\n                company,\n                active,\n                stage: value,\n            },\n            access_token\n        }\n        dispatch(updateJob(data))\n    }\n\n    let currentStage = selected ? \"status-active\" : \"\"\n\n    return (\n        <>\n            <div onClick={handleClick} style={{ display: \"flex\", flexDirection: \"column\" }}>\n                <div onClick={handleUpdateStage} className={\"status-circle \" + currentStage}></div>\n                <small>{label}</small>\n            </div>\n        </>\n    );\n};\n\nexport default StageTracker;","import React, { useState } from 'react'\nimport { Link } from \"react-router-dom\"\nimport StageTracker from './StageTracker'\n\nconst JobPreview = ({ job }) => {\n    \n    const {\n        title,\n        company,\n        active,\n        stage,\n    } = job \n\n    const [current, setCurrent] = useState(stage)\n\n    return (\n        <>\n            <div className=\"job-card-container\">\n                <div className=\"job-card-text\">\n                    <h4 className=\"para-highlight\">\n                        {job.title}\n                    </h4>\n                    <h4 className=\"para-header\">\n                        {job.company}\n                    </h4>\n                </div>\n                <div className=\"status-bar\">\n                    <StageTracker\n                        handleClick={() => setCurrent(\"1\")}\n                        selected={current === \"1\"}\n                        label=\"Not applied\"\n                        value=\"1\"\n                        title={title}\n                        company={company}\n                        active={active}\n                        job_id={job.id}\n                    />\n                    <StageTracker\n                        handleClick={() => setCurrent(\"2\")}\n                        selected={current === \"2\"}\n                        label=\"Applied\"\n                        value=\"2\"\n                        title={title}\n                        company={company}\n                        active={active}\n                        job_id={job.id}\n                    />\n                    <StageTracker\n                        handleClick={() => setCurrent(\"3\")}\n                        selected={current === \"3\"}\n                        label=\"Interview\"\n                        value=\"3\"\n                        title={title}\n                        company={company}\n                        active={active}\n                        job_id={job.id}\n                    />\n                    <StageTracker\n                        handleClick={() => setCurrent(\"4\")}\n                        selected={current === \"4\"}\n                        label=\"Offer\"\n                        value=\"4\"\n                        title={title}\n                        company={company}\n                        active={active}\n                        job_id={job.id}\n                    />\n                </div>\n                <Link to={`/jobs/${job.id}`} className=\"expand_btn\">&#8250;</Link>\n            </div>\n            <hr className=\"status-line\"></hr>\n        </>\n    );\n};\n\nexport default JobPreview;","import {\n    addAppNote as apiAddAppNote,\n    updateAppNote as apiUpdateAppNote,\n    deleteAppNote as apiDeleteAppNote\n} from '../ApiRequests/appNotes'\n\nimport {\n    APPLICATION_NOTE_POST_REQUEST,\n    APPLICATION_NOTE_POST_SUCCESS,\n    APPLICATION_NOTE_POST_FAILURE,\n    APPLICATION_NOTE_PATCH_REQUEST,\n    APPLICATION_NOTE_PATCH_SUCCESS,\n    APPLICATION_NOTE_PATCH_FAILURE,\n    APPLICATION_NOTE_DELETE_REQUEST,\n    APPLICATION_NOTE_DELETE_SUCCESS,\n    APPLICATION_NOTE_DELETE_FAILURE\n} from './constants'\n\n// adds new application note for specific job\nexport const addAppNote = data => dispatch => {\n    return new Promise((resolve, reject) => {\n        dispatch(addAppNoteRequest())\n        apiAddAppNote(data)\n            .then(successResponse => {\n                dispatch(addAppNoteSuccess(successResponse))\n                resolve(successResponse)\n            })\n            .catch(errorResponse => {\n                dispatch(addAppNoteFailure(errorResponse))\n            })\n    })\n}\n\nconst addAppNoteRequest = () => dispatch => (\n    dispatch({\n        type: APPLICATION_NOTE_POST_REQUEST,\n    })\n)\n\nconst addAppNoteSuccess = data => dispatch => (\n    dispatch({\n        type: APPLICATION_NOTE_POST_SUCCESS,\n        payload: data.data\n    })\n)\n\nconst addAppNoteFailure = error => dispatch => (\n    dispatch({\n        type: APPLICATION_NOTE_POST_FAILURE,\n        payload: error\n    })\n)\n\n// updates a specific application card note for a specific job\nexport const updateAppNote = data => dispatch => {\n    return new Promise((resolve, reject) => {\n        dispatch(updateAppNoteRequest())\n        apiUpdateAppNote(data)\n            .then(successResponse => {\n                dispatch(updateAppNoteSuccess(successResponse))\n                resolve(successResponse)\n            })\n            .catch(errorResponse => {\n                dispatch(updateAppNoteFailure(errorResponse))\n            })\n    })\n}\n\nconst updateAppNoteRequest = () => dispatch => (\n    dispatch({\n        type: APPLICATION_NOTE_PATCH_REQUEST,\n    })\n)\n\nconst updateAppNoteSuccess = data => dispatch => {\n    return (\n        dispatch({\n            type: APPLICATION_NOTE_PATCH_SUCCESS,\n            payload: data.data\n        })\n    )\n}\n\nconst updateAppNoteFailure = error => dispatch => (\n    dispatch({\n        type: APPLICATION_NOTE_PATCH_FAILURE,\n        payload: error\n    })\n)\n\n// deletes a single note from a specific job's application card\nexport const deleteAppNote = data => dispatch => {\n    return new Promise((resolve, reject) => {\n        dispatch(deleteAppNoteRequest())\n        apiDeleteAppNote(data)\n            .then(successResponse => {\n                dispatch(deleteAppNoteSuccess(data.note_id))\n                resolve(successResponse)\n            })\n            .catch(errorResponse => {\n                dispatch(deleteAppNoteFailure(errorResponse))\n            })\n    })\n}\n\nconst deleteAppNoteRequest = () => dispatch => (\n    dispatch({\n        type: APPLICATION_NOTE_DELETE_REQUEST,\n    })\n)\n\nconst deleteAppNoteSuccess = data => dispatch => {\n    return (\n        dispatch({\n            type: APPLICATION_NOTE_DELETE_SUCCESS,\n            payload: data\n        })\n    )\n}\n\nconst deleteAppNoteFailure = error => dispatch => (\n    dispatch({\n        type: APPLICATION_NOTE_DELETE_FAILURE,\n        payload: error\n    })\n)","import axios from '../axios'\n\n// application note post request\nexport const addAppNote = data => {\n    const { user_id, job_id, access_token, notes_data } = data\n    return axios.post(`user/${user_id}/jobs/${job_id}/app-notes`, notes_data, {\n        headers: {\n            'Authorization': `Bearer ${access_token}`\n        }\n    })\n}\n\n// application note patch request\nexport const updateAppNote = data => {\n    const { user_id, job_id, note_id, note_data, access_token } = data\n    return axios.patch(`user/${user_id}/jobs/${job_id}/app-notes/${note_id}`, note_data, {\n        headers: {\n            'Authorization': `Bearer ${access_token}`\n        }\n    })\n}\n\n// application note delete request\nexport const deleteAppNote = data => {\n    const { user_id, job_id, note_id, access_token } = data\n    return axios.delete(`user/${user_id}/jobs/${job_id}/app-notes/${note_id}`, {\n        headers: {\n            'Authorization': `Bearer ${access_token}`\n        }\n    })\n}","// application card note post request\nexport const APPLICATION_NOTE_POST_REQUEST = 'APPLICATION_NOTE_POST_REQUEST'\n\nexport const APPLICATION_NOTE_POST_SUCCESS = 'APPLICATION_NOTE_POST_SUCCESS'\n\nexport const APPLICATION_NOTE_POST_FAILURE = 'APPLICATION_NOTE_POST_FAILURE'\n\n// application card note patch request\nexport const APPLICATION_NOTE_PATCH_REQUEST = 'APPLICATION_NOTE_PATCH_REQUEST'\n\nexport const APPLICATION_NOTE_PATCH_SUCCESS = 'APPLICATION_NOTE_PATCH_SUCCESS'\n\nexport const APPLICATION_NOTE_PATCH_FAILURE = 'APPLICATION_NOTE_PATCH_FAILURE'\n\n// application card note delete request\nexport const APPLICATION_NOTE_DELETE_REQUEST = 'APPLICATION_NOTE_DELETE_REQUEST'\n\nexport const APPLICATION_NOTE_DELETE_SUCCESS = 'APPLICATION_NOTE_DELETE_SUCCESS'\n\nexport const APPLICATION_NOTE_DELETE_FAILURE = 'APPLICATION_NOTE_DELETE_FAILURE'","import {\n    addInterview as apiAddInterview,\n    updateInterview as apiUpdateInterview,\n    deleteInterview as apiDeleteInterview\n} from '../ApiRequests/interviews'\n\nimport {\n    INTERVIEW_POST_REQUEST,\n    INTERVIEW_POST_SUCCESS,\n    INTERVIEW_POST_FAILURE,\n    INTERVIEW_PATCH_REQUEST,\n    INTERVIEW_PATCH_SUCCESS,\n    INTERVIEW_PATCH_FAILURE,\n    INTERVIEW_DELETE_REQUEST,\n    INTERVIEW_DELETE_SUCCESS,\n    INTERVIEW_DELETE_FAILURE,\n} from './constants'\n\n// adds new empty interview for specific job\nexport const addInterview = data => dispatch => {\n    return new Promise((resolve, reject) => {\n        dispatch(addInterviewRequest())\n        apiAddInterview(data)\n            .then(successResponse => {\n                dispatch(addInterviewSuccess(successResponse))\n                resolve(successResponse)\n            })\n            .catch(errorResponse => {\n                dispatch(addInterviewFailure(errorResponse))\n            })\n    })\n}\n\nconst addInterviewRequest = () => dispatch => (\n    dispatch({\n        type: INTERVIEW_POST_REQUEST,\n    })\n)\n\nconst addInterviewSuccess = data => dispatch => (\n    dispatch({\n        type: INTERVIEW_POST_SUCCESS,\n        payload: data\n    })\n)\n\nconst addInterviewFailure = error => dispatch => (\n    dispatch({\n        type: INTERVIEW_POST_FAILURE,\n        payload: error\n    })\n)\n\n// updates a specific job interview's details\nexport const updateInterview = data => dispatch => {\n    return new Promise((resolve, reject) => {\n        dispatch(updateInterviewRequest())\n        apiUpdateInterview(data)\n            .then(successResponse => {\n                dispatch(updateInterviewSuccess(successResponse))\n                resolve(successResponse)\n            })\n            .catch(errorResponse => {\n                dispatch(updateInterviewFailure(errorResponse))\n            })\n    })\n}\n\nconst updateInterviewRequest = () => dispatch => (\n    dispatch({\n        type: INTERVIEW_PATCH_REQUEST,\n    })\n)\n\nconst updateInterviewSuccess = data => dispatch => {\n    return (\n        dispatch({\n            type: INTERVIEW_PATCH_SUCCESS,\n            payload: data.data.data\n        })\n    )\n} \n\nconst updateInterviewFailure = error => dispatch => (\n    dispatch({\n        type: INTERVIEW_PATCH_FAILURE,\n        payload: error\n    })\n)\n\n// deletes a single interview from a specific job's interview card\nexport const deleteInterview = data => dispatch => {\n    return new Promise((resolve, reject) => {\n        dispatch(deleteInterviewRequest())\n        apiDeleteInterview(data)\n            .then(successResponse => {\n                dispatch(deleteInterviewSuccess(data.interview_id))\n                resolve(successResponse)\n            })\n            .catch(errorResponse => {\n                dispatch(deleteInterviewFailure(errorResponse))\n            })\n    })\n}\n\nconst deleteInterviewRequest = () => dispatch => (\n    dispatch({\n        type: INTERVIEW_DELETE_REQUEST,\n    })\n)\n\nconst deleteInterviewSuccess = data => dispatch => (\n    dispatch({\n        type: INTERVIEW_DELETE_SUCCESS,\n        payload: data\n    })\n)\n\nconst deleteInterviewFailure = error => dispatch => (\n    dispatch({\n        type: INTERVIEW_DELETE_FAILURE,\n        payload: error\n    })\n)","import axios from '../axios'\n\n// interview post request\nexport const addInterview = data => {\n    const { user_id, job_id, access_token, interview_data } = data\n    return axios.post(`user/${user_id}/jobs/${job_id}/interviews`, interview_data, {\n        headers: {\n            'Authorization': `Bearer ${access_token}`\n        }\n    })\n}\n\n// interview patch request\nexport const updateInterview = data => {\n    const { user_id, job_id, interview_data, interview_id, access_token } = data\n    return axios.patch(`user/${user_id}/jobs/${job_id}/interviews/${interview_id}`, interview_data, {\n        headers: {\n            'Authorization': `Bearer ${access_token}`\n        }\n    })\n}\n\n// interview delete request\nexport const deleteInterview = data => {\n    const { user_id, job_id, interview_id, access_token } = data\n    return axios.delete(`user/${user_id}/jobs/${job_id}/interviews/${interview_id}`, {\n        headers: {\n            'Authorization': `Bearer ${access_token}`\n        }\n    })\n}","// interview post request\nexport const INTERVIEW_POST_REQUEST = 'INTERVIEW_POST_REQUEST'\n\nexport const INTERVIEW_POST_SUCCESS = 'INTERVIEW_POST_SUCCESS'\n\nexport const INTERVIEW_POST_FAILURE = 'INTERVIEW_POST_FAILURE'\n\n// interview patch request\nexport const INTERVIEW_PATCH_REQUEST = 'INTERVIEW_PATCH_REQUEST'\n\nexport const INTERVIEW_PATCH_SUCCESS = 'INTERVIEW_PATCH_SUCCESS'\n\nexport const INTERVIEW_PATCH_FAILURE = 'INTERVIEW_PATCH_FAILURE'\n\n// interview delete request\nexport const INTERVIEW_DELETE_REQUEST = 'INTERVIEW_DELETE_REQUEST'\n\nexport const INTERVIEW_DELETE_SUCCESS = 'INTERVIEW_DELETE_SUCCESS'\n\nexport const INTERVIEW_DELETE_FAILURE = 'INTERVIEW_DELETE_FAILURE'","// Calculates today's date\nconst dateToday = () => {\n    let today = new Date()\n    let dd = String(today.getDate()).padStart(2, '0')\n    let mm = String(today.getMonth() + 1).padStart(2, '0')\n    let yyyy = today.getFullYear();\n    \n    return yyyy + '-' + mm + '-' + dd\n}\n\nexport default dateToday","import React from 'react'\n\nconst JobDetailsForm = ({\n    currentStep,\n    nextStep,\n    values,\n    handleJobChange,\n    handleFirstSubmit\n}) => {\n    return currentStep && (\n        <>\n            <h1 className=\"addjob-form-headerjob\">Step 1: Job Details</h1>\n            <h3>Here you can add details of the job you are applying for.</h3>\n            <form onSubmit={handleFirstSubmit, nextStep}>\n                <div className=\"form-input-group addjob-input-group addjob-input-jobtitle\">\n                    <label\n                        className=\"label\"\n                        htmlFor=\"title\"\n                    >Job Title\n                    </label>\n                    <input\n                        type=\"text\"\n                        id=\"title\"\n                        value={values.title}\n                        onChange={handleJobChange}\n                        required\n                    />\n                </div>\n\n                <div className=\"form-input-group addjob-input-group addjob-input-company\">\n                    <label\n                        className=\"label\"\n                        htmlFor=\"company\"\n                    >Company\n                        </label>\n                    <input\n                        type=\"text\"\n                        id=\"company\"\n                        value={values.company}\n                        onChange={handleJobChange}\n                        required\n                    />\n                </div>\n\n                <div className=\"form-input-group addjob-input-group addjob-input-salary\">\n                    <label\n                        className=\"label mr-1\"\n                        htmlFor=\"salary\"\n                    >Salary p/a\n                    </label>\n                    <input\n                        type=\"number\"\n                        id=\"salary\"\n                        value={values.salary}\n                        onChange={handleJobChange}\n                    />\n                </div>\n\n                <div className=\"form-input-group addjob-input-group addjob-input-location\">\n                    <label\n                        className=\"label\"\n                        htmlFor=\"location\"\n                    >Location\n                    </label>\n                    <input\n                        type=\"text\"\n                        id=\"location\"\n                        value={values.location}\n                        onChange={handleJobChange}\n                    />\n                </div >\n\n                <div className=\"form-input-group addjob-input-group addjob-input-appdate\">\n                    <label\n                        className=\"label mr-1\"\n                        htmlFor=\"date_applied\"\n                    >Date Applied\n                    </label>\n                    <input\n                        type=\"date\"\n                        id=\"date_applied\"\n                        value={values.date_applied}\n                        onChange={handleJobChange}\n                    />\n                </div >\n\n                <div className=\"form-input-group addjob-input-group addjob-input-closedate\">\n                    <label\n                        className=\"label mr-1\"\n                        htmlFor=\"closing_date\"\n                    >Closing Date\n                    </label>\n                    <input\n                        type=\"date\"\n                        id=\"closing_date\"\n                        value={values.closing_date}\n                        onChange={handleJobChange}\n                    />\n                </div >\n\n                <div className=\"form-input-group addjob-input-group addjob-input-jobdescription\">\n                    <label\n                        className=\"label\"\n                        htmlFor=\"description\"\n                    >Job Description\n                    </label>\n                    <input\n                        type=\"text\"\n                        id=\"description\"\n                        value={values.description}\n                        onChange={handleJobChange}\n                    />\n                </div>\n                <input type=\"submit\" value=\"Next Step\"/>\n            </form>\n\n        </>\n    );\n};\n\nexport default JobDetailsForm;","import React from 'react';\n\nconst ApplicationDetailsForm = ({\n    currentStep,\n    prevStep,\n    values,\n    nextStep,\n    handleJobChange,\n    handleAppChange\n}) => {\n    return currentStep && (\n        <>\n        \n            <h1>Step 2: Application</h1>\n            <h3>Here you can upload your CV, Cover Letter and any application notes.</h3>\n            <label htmlFor=\"cv\">Upload my CV</label>\n            <input\n                type=\"text\"\n                id=\"cv\"\n                onChange={handleJobChange}\n            />\n            <label htmlFor=\"cover_letter\">Upload my Cover Letter</label>\n            <input\n                type=\"text\"\n                id=\"cover_letter\"\n                onChange={handleJobChange}\n            />\n            <label htmlFor=\"data\">Applications Notes:</label>\n            <input \n                type=\"text\"\n                id=\"data\"\n                onChange={handleAppChange}\n\n            />\n            <button onClick={prevStep}>Go back</button>\n            <button onClick={nextStep}>Next step</button>\n        </ >\n    );\n};\n\nexport default ApplicationDetailsForm;","import React from 'react';\n\nconst InterviewDetailsForm = ({\n    currentStep,\n    prevStep,\n    handleSecondSubmit,\n    values,\n    handleInterviewChange,\n    handleInterviewFormat\n}) => {\n    return currentStep && (\n        <>\n            <h1>Step 3: Interview Details</h1>\n            <h3>Add any interview details. No interview yet? Just leave this blank and edit later.</h3>\n            <label htmlFor=\"interview_date\">Interview date</label>\n            <input\n                type=\"date\"\n                id=\"interview_date\"\n                value={values.interview_date}\n                onChange={handleInterviewChange}\n            />\n\n            <label htmlFor=\"interview_format\">Interview format</label>\n            <select\n                id=\"interview_format\"\n                value={values.interview_format}\n                onChange={handleInterviewFormat}\n            >\n                <option value=\"in_person\">In person</option>\n                <option value=\"telephone\">Telephone</option>\n                <option value=\"video_call\">Video Call</option>\n                <option value=\"online_testing\">Online Test</option>\n            </select>\n\n            <label htmlFor=\"interviewer\">Interview name</label>\n            <input\n                type=\"text\"\n                id=\"interviewer\"\n                value={values.interviewer}\n                onChange={handleInterviewChange}\n            />\n\n            <textarea\n                cols=\"30\"\n                rows=\"10\"\n                placeholder=\"Interview notes\"\n                id=\"notes\"\n                value={values.notes}\n                onChange={handleInterviewChange}\n            />\n            <button onClick={prevStep}>Go back</button>\n            <button type=\"submit\" onClick={handleSecondSubmit}>Finish &amp; Save</button>\n        </>\n    );\n};\n\nexport default InterviewDetailsForm;","import React, { useReducer } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { addJob, updateJob } from '../../data/Jobs/actions'\nimport { addAppNote } from '../../data/AppNotes/actions'\nimport { addInterview } from '../../data/Interviews/actions'\nimport dateToday from '../../helpers/dateToday.js'\nimport JobDetailsForm from './JobDetailsForm'\nimport ApplicationDetailsForm from './ApplicationDetailsForm'\nimport InterviewDetailsForm from './InterviewDetailsForm'\n\n// local reducer that handles updating local state properties (initialised in the initialState variable below)\nconst jobFormReducer = (state, action) => {\n    switch (action.type) {\n        // for values within the job object\n        case 'JOB_FIELD_CHANGE':\n            return {\n                ...state,\n                job: {\n                    ...state.job,\n                    [action.payload.fieldName]: action.payload.value\n                }\n            }\n        // for values within the interview object\n        case 'INTERVIEW_FIELD_CHANGE':\n            return {\n                ...state,\n                interview : {\n                    ...state.interview,\n                    [action.payload.fieldName]: action.payload.value\n                }\n            }\n        // specifically for the interview.format value    \n        case 'INTERVIEW_FORMAT_CHANGE':\n            return {\n                ...state,\n                interview : {\n                    ...state.interview,\n                    format: action.payload\n                }\n            }\n        // for values within the application_notes object\n        case 'APPLICATION_FIELD_CHANGE':\n            return {\n                ...state,\n                application_notes : {\n                    ...state.application_notes,\n                    [action.payload.fieldName]: action.payload.value\n                }\n            }\n        case 'NEXT_STEP':\n            return {\n                ...state,\n                step: state.step + 1\n            }\n        case 'PREVIOUS_STEP':\n            return {\n                ...state,\n                step: state.step - 1\n            }\n        case 'RESET_FORM':\n            return {\n                ...initialState,\n            }\n        default: return;\n    }\n}\n\n// calculate today's date for application_notes\nlet today = dateToday()\n\n// initial state of component\nconst initialState = {\n    job: {\n        title: \"\",\n        company: \"\",\n        description: \"\",\n        salary: 0,\n        location: \"\",\n        date_applied: \"\",\n        closing_date: \"\",\n        cv: \"\",\n        cover_letter: \"\",\n        active: \"1\",\n        stage: \"1\"\n    },\n    interview : {\n        interview_date: \"\",\n        format: \"in_person\",\n        interviewer: \"\",\n        notes: \"\"\n    },\n    application_notes : {\n        date: today,\n        data: \"\"\n    },\n    step: 1\n}\n\nconst JobForm = () => {\n    const [state, dispatch] = useReducer(jobFormReducer, initialState)\n    const dispatchAction = useDispatch()\n    const user_id = useSelector(state => state.user_id)\n    const job_id = useSelector(state => state.job_id)\n    const access_token = useSelector(state => state.user.access_token)\n    const {\n        job: {\n            title,\n            company,\n            description,\n            salary,\n            location,\n            date_applied,\n            closing_date,\n            cv,\n            cover_letter,\n            active,\n            stage\n        },\n        interview : {\n            interview_date,\n            format,\n            interviewer,\n            notes\n        },\n        application_notes : {\n            date,\n            data\n        },\n        step\n    } = state\n\n    // form fields for first step\n    const firstFormValues = {\n        title,\n        company,\n        description,\n        salary,\n        location,\n        date_applied,\n        closing_date\n    }\n\n    // form fields for second step\n    const secondFormValues = {\n        cv,\n        cover_letter,\n        data\n    }\n\n    // form fields for third step\n    const thirdFormValues = {\n        interview_date,\n        format,\n        interviewer,\n        notes\n    }\n\n    // proceed to next step\n    const nextStep = () => {\n        dispatch({ type: \"NEXT_STEP\" })\n    };\n\n    // go back to prev step\n    const prevStep = () => {\n        dispatch({ type: \"PREVIOUS_STEP\" })\n    };\n\n    // handles changing input field\n    const handleJobChange = e => {\n        dispatch({\n            type: 'JOB_FIELD_CHANGE',\n            payload: {\n                fieldName: e.target.id,\n                value: e.target.value\n            }\n        })\n    }\n\n    const handleAppChange = e => {\n        dispatch({\n            type: 'APPLICATION_FIELD_CHANGE',\n            payload: {\n                fieldName: e.target.id,\n                value: e.target.value\n            }\n        })\n    }\n\n    const handleInterviewChange = e => {\n        dispatch({\n            type: 'INTERVIEW_FIELD_CHANGE',\n            payload: {\n                fieldName: e.target.id,\n                value: e.target.value\n            }\n        })\n    }\n\n    // handles changing the interview format in the interview details component\n    const handleInterviewFormat = e => {\n        dispatch({\n            type: 'INTERVIEW_FORMAT_CHANGE',\n            payload: e.target.value\n        })\n    }\n\n    // Form must submit twice: the job_id is returned after the first submission (POST user/${user_id}/jobs) and is required in the URL of the second submission (POST user/${user_id}/jobs/${job_id}/interviews & POST user/${user_id}/jobs/${job_id}/app-notes)\n    const handleFirstSubmit = e => {\n        e.preventDefault()\n\n\n        // assigns the job object in state to data variable\n        const job_data = { ...state.job }\n\n\n        // dispatches job_data to API (POST user/${user_id}/jobs)\n        // job_id is returned and stored in global state\n        dispatchAction(addJob({\n            user_id,\n            access_token,\n            job_data: job_data,\n        }))\n\n    }\n\n    // Second submission now that job_id has been returned from API\n    const handleSecondSubmit = e => {\n        e.preventDefault()\n\n        // assigns the invterview and notes objects in state to data variables\n        const interview_data = { ...state.interview }\n        const notes_data = { ...state.application_notes }\n        const job_data = { ...state.job }\n\n        // will only POST if app notes data exists\n        if (notes_data.data !== \"\") {\n            // dispatches notes_data to API (POST user/${user_id}/jobs/${job_id}/app-notes)\n            dispatchAction(addAppNote({\n                user_id,\n                job_id,\n                access_token,\n                notes_data: notes_data,\n            }))\n        }\n\n        // will only POST if an interview date has been selected\n        if (interview_data.interview_date !== \"\") {\n            // dispatches interview_data to API (POST user/${user_id}/jobs/${job_id}/interviews)\n            dispatchAction(addInterview({\n                user_id,\n                job_id,\n                access_token,\n                interview_data: interview_data,\n            }))\n        }\n\n        let form_data = {}\n\n        // if the cv field is left blank, exclude it from the PATCH request\n        if (job_data.cv === \"\" && job_data.cover_letter !== \"\") {\n            form_data = { title, company, active, stage, cover_letter }\n        }\n        // if the cover_letter field is left blank, exclude it from the PATCH request\n        else if (job_data.cv !== \"\" && job_data.cover_letter === \"\") {\n            form_data = { title, company, active, stage, cv }\n        }\n        // otherwise, send both\n        else {\n            form_data = { title, company, active, stage, cv, cover_letter }\n        }\n\n        // will not PATCH if eiher the cv or cover letter is left blank\n        if (job_data.cv !== \"\" || job_data.cover_letter !== \"\")  {\n            // dispatches job_data to API (PATCH user/${user_id}/jobs/${job_id})\n            dispatchAction(updateJob({\n                user_id,\n                job_id,\n                access_token,\n                job_data: { ...form_data }\n            }))\n        }\n\n        // resets form fields\n        dispatch({ type: 'RESET_FORM' })\n    }\n    return (\n        <>\n        <form onSubmit={handleFirstSubmit}>\n            <JobDetailsForm\n                currentStep={step === 1}\n                nextStep={nextStep}\n                handleFirstSubmit={handleFirstSubmit}\n                handleJobChange={handleJobChange}\n                values={firstFormValues}\n            />\n        </form>\n        <form onSubmit={handleSecondSubmit}>\n            <ApplicationDetailsForm\n                currentStep={step === 2}\n                nextStep={nextStep}\n                prevStep={prevStep}\n                handleJobChange={handleJobChange}\n                handleAppChange={handleAppChange}\n                values={secondFormValues}\n            />\n            <InterviewDetailsForm\n                currentStep={step === 3}\n                nextStep={nextStep}\n                prevStep={prevStep}\n                handleSecondSubmit={handleSecondSubmit}\n                handleInterviewChange={handleInterviewChange}\n                handleInterviewFormat={handleInterviewFormat}\n                values={thirdFormValues}\n            />\n        </form>\n        </>\n    )\n}\n\nexport default JobForm;","import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Modal from 'react-modal'\nimport JobPreview from './JobPreview'\nimport JobForms from '../JobForms/JobForms'\nimport { getJobs } from '../../data/Jobs/actions'\nimport Nav from '../Nav'\n\nconst MainPage = () => {\n    const [showModal, setOpen] = useState(false)\n    // we are destructuring the user's access token (bearer token) and their id from global state, so when this component loads they can be used in the get request for the user's jobs\n    const { jobs, user: { access_token }, user_id } = useSelector(state => state)\n    const dispatch = useDispatch()\n\n    // opens job form modal\n    const openModal = () => {\n        setOpen(true)\n    }\n\n    // closes jobs form modal\n    const closeModal = () => {\n        setOpen(false)\n    }\n\n    // when component mounts, send an object with the user's access token and id to the action\n    useEffect(() => { // (ie componentdidmount)\n        const data = {\n            access_token,\n            user_id\n        }\n        dispatch(getJobs(data));\n    }, []);\n\n    return (\n        <>\n        <Nav />\n            <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n                <a href=\"\">Sort by</a>\n                <button onClick={openModal}>Add new application</button>\n\n            </div>\n            <h1>My Applications</h1>\n            <div>\n                {jobs.map((job, index) => (\n                    job.active && <JobPreview job={job} key={index} />\n                ))}\n            </div>\n            <Modal\n                isOpen={showModal}\n                onClose={closeModal}\n                onRequestClose={closeModal}\n            >\n                <JobForms />\n            </Modal>\n        </>\n    )\n}\n\nexport default MainPage","import React from 'react'\n\nconst Loading = () => (\n    <div className=\"loader\">Loading</div>\n)\n\nexport default Loading","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { updateJob } from '../../../data/Jobs/actions'\n\nconst JobDetail = ({ label, inputType, jobProperty, value, title, company, active, stage }) => {\n    const [jobInputValue, setJobInputValue] = useState(value)\n    const [editing, setEditing] = useState(false)\n    const user_id = useSelector(state => state.user_id)\n    const job_id = useSelector(state => state.job.data.data.id)\n    const access_token = useSelector(state => state.access_token)\n    \n    const dispatch = useDispatch()\n\n    // dispatches action with updated job detail\n    const handleUpdateJob = () => {\n        const data = {\n            user_id,\n            job_id,\n            job_data: {\n                [jobProperty]: jobInputValue,\n                title,\n                company,\n                active,\n                stage\n            },\n            access_token\n        }\n        dispatch(updateJob(data))\n        setEditing(false)\n    }\n\n    const handleUpdateJobTitle = () => {\n        const data = {\n            user_id,\n            job_id,\n            job_data: {\n                title: jobInputValue,\n                company,\n                active,\n                stage\n            },\n            access_token\n        }\n        dispatch(updateJob(data))\n        setEditing(false)\n    }\n\n    const handleUpdateJobCompany = () => {\n        const data = {\n            user_id,\n            job_id,\n            job_data: {\n                title,\n                company: jobInputValue,\n                active,\n                stage\n            },\n            access_token\n        }\n        dispatch(updateJob(data))\n        setEditing(false)\n    }\n\n    return (\n        <div className=\"input-group\" style={{ display: \"flex\" }}>\n            <div>\n                <label\n                    className=\"label\"\n                    htmlFor={jobProperty}\n                >{label}\n                </label>\n                {editing ?\n\n                    <input\n                        id={jobProperty}\n                        value={jobInputValue}\n                        type={inputType}\n                        onChange={e => setJobInputValue(e.target.value)}\n                    />\n                    :\n                    <p>{jobInputValue}</p>\n                }\n            </div>\n\n            {/* if not editing, show the Edit button and set editing variable to true onClick */}\n            {!editing ?\n                <button\n                style={{ height: \"2rem\" }}\n                onClick={() => setEditing(true)}\n                 >Edit\n                </button>\n                :\n                null\n            }\n\n            {/*save button for PATCH request shows for each field except title and company */}\n            {editing && jobProperty !== \"title\" && jobProperty !== \"company\" ?\n                <button\n                    style={{ height: \"2rem\" }}\n                    type=\"submit\"\n                    onClick={handleUpdateJob}\n                >\n                    Save\n                </button>\n                : null\n            }\n\n            {/*save button for title PATCH request */}\n            {editing && jobProperty === \"title\" ?\n                <button\n                    style={{ height: \"2rem\" }}\n                    type=\"submit\"\n                    onClick={handleUpdateJobTitle}\n                >\n                    Save\n                </button>\n            : null \n            }\n\n            {/*save button for company PATCH request */}\n            {editing && jobProperty === \"company\" ?\n                <button\n                    style={{ height: \"2rem\" }}\n                    type=\"submit\"\n                    onClick={handleUpdateJobCompany}\n                >\n                    Save\n                </button>\n            : null \n            }\n\n        </div>\n    )\n}\n\nexport default JobDetail","import React from 'react'\nimport JobDetail from './JobDetail'\n\nconst JobDetailsCard = ({ job }) => {\n    const {\n        title,\n        company,\n        description,\n        salary,\n        location,\n        date_applied,\n        closing_date,\n        active,\n        stage\n    } = job\n\n    return (\n        <div style={{ display: \"flex\", flexDirection: \"column\", border: \"1px solid black\", padding: \"2rem\" }}>\n            <h1 className=\"para_header\">Job Details</h1>\n            <JobDetail\n                label=\"Job Title\"\n                inputType=\"text\"\n                jobProperty=\"title\"\n                value={title}\n                company={company}\n                active={active}\n                stage={stage}\n            />\n            <JobDetail\n                label=\"Company\"\n                inputType=\"text\"\n                jobProperty=\"company\"\n                value={company}\n                title={title}\n                active={active}\n                stage={stage}\n            />\n            <JobDetail\n                label=\"Job Description\"\n                inputType=\"text\"\n                jobProperty=\"description\"\n                value={description}\n                title={title}\n                company={company}\n                active={active}\n                stage={stage}\n            />\n            <JobDetail\n                label=\"Salary p/a\"\n                inputType=\"number\"\n                jobProperty=\"salary\"\n                value={salary}\n                title={title}\n                company={company}\n                active={active}\n                stage={stage}\n            />\n            <JobDetail\n                label=\"Location\"\n                inputType=\"text\"\n                jobProperty=\"location\"\n                value={location}\n                title={title}\n                company={company}\n                active={active}\n                stage={stage}\n            />\n            <JobDetail\n                label=\"Date Applied\"\n                inputType=\"date\"\n                jobProperty=\"date_applied\"\n                value={date_applied}\n                title={title}\n                company={company}\n                active={active}\n                stage={stage}\n            />\n            <JobDetail\n                label=\"Closing Date\"\n                inputType=\"date\"\n                jobProperty=\"closing_date\"\n                value={closing_date}\n                title={title}\n                company={company}\n                active={active}\n                stage={stage}\n            />\n        </div>\n    )\n}\n\nexport default JobDetailsCard","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { updateJob } from '../../../data/Jobs/actions'\n\nconst ApplicationInput = ({ appCardInput, jobProperty, title, company, active, stage }) => {\n    const [inputValue, setInput] = useState(appCardInput)\n    const [editing, setEditing] = useState(false)\n    const job_id = useSelector(state => state.job.data.data.id)\n    const user_id = useSelector(state => state.user_id)\n    const access_token = useSelector(state => state.access_token)\n    const dispatch = useDispatch()\n\n    // dispatches action with updated cv or cover letter\n    const handleUpdateJob = () => {\n        const data = {\n            user_id,\n            job_id,\n            job_data: {\n                [jobProperty]: inputValue,\n                title,\n                company,\n                active,\n                stage\n            },\n            access_token\n        }\n        dispatch(updateJob(data))\n        setEditing(false)\n    }\n\n    return (\n        <>\n            <label htmlFor={jobProperty}>\n                {jobProperty === \"cv\"\n                    ?\n                    \"CV:\"\n                    :\n                    \"Cover Letter:\"\n                }\n            </label>\n            {editing\n                ?\n                <input\n                    type=\"text\"\n                    id={jobProperty}\n                    value={inputValue}\n                    onChange={e => setInput(e.target.value)}\n                />\n                :\n                <p>\n                    {inputValue === null\n                        ?\n                        \"-\"\n                        :\n                        inputValue\n                    }\n                </p>\n            }\n            {editing\n                ?\n                <button onClick={handleUpdateJob}>Save</button>\n                :\n                <button onClick={() => setEditing(true)}>Edit</button>\n            }\n        </>\n    )\n}\n\nexport default ApplicationInput","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { updateAppNote, deleteAppNote } from '../../../data/AppNotes/actions'\nimport dateToday from '../../../helpers/dateToday.js'\n\nconst ApplicationNote = ({ applicationNote }) => {\n    const [editing, setEditing] = useState(false)\n    const [note, setNote] = useState(applicationNote.data)\n    const dispatch = useDispatch()\n    // the necessary ids to make updateAppNote patch request\n    const job_id = useSelector(state => state.job.data.data.id)\n    const { id: note_id } = applicationNote\n    const user_id = useSelector(state => state.user_id)\n    // access token for Authentication\n    const access_token = useSelector(state => state.access_token)\n\n    // get today's date for application notes\n    let today = dateToday()\n\n    // updates single application card note\n    const handleUpdateAppNote = e => {\n        e.preventDefault()\n\n        const data = {\n            user_id,\n            job_id,\n            note_id,\n            note_data: {\n                data: note,\n                date: today\n            },\n            access_token\n        }\n        dispatch(updateAppNote(data))\n        setEditing(false)\n    }\n\n    // deletes single application card note\n    const handleDeleteAppNote = () => {\n        dispatch(deleteAppNote({\n            user_id,\n            job_id,\n            note_id,\n            access_token\n        }))\n    }\n\n    return (\n        <>\n\n        {!editing ? <button onClick={() => setEditing(true)}>Edit</button> : <button onClick={handleUpdateAppNote}>Done</button>}\n        \n        {editing ?\n                < textarea\n                    cols=\"30\"\n                    rows=\"10\"\n                    value={note}\n                    onChange={e => setNote(e.target.value)}\n                />\n            :\n            <p>{note} {applicationNote.date}</p>\n        }\n\n        <button onClick={handleDeleteAppNote}>Delete</button>\n        </>\n    )\n}\n\nexport default ApplicationNote","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport ApplicationInput from './ApplicationInput'\nimport { addAppNote } from '../../../data/AppNotes/actions'\nimport ApplicationNote from './ApplicationNote'\nimport dateToday from '../../../helpers/dateToday.js'\n\nconst ApplicationCard = ({ job }) => {\n    const user_id = useSelector(state => state.user_id)\n    const job_id = useSelector(state => state.job.data.data.id)\n    const { access_token } = useSelector(state => state)\n    const [editing, setEditing] = useState(false)\n    const [note, setNote] = useState(job.application_notes.data)\n\n    const dispatch = useDispatch()\n\n    let date = dateToday()\n\n    // adds new empty note in application card\n    const handleAddAppNote = () => {\n        dispatch(addAppNote({\n            user_id,\n            job_id,\n            access_token,\n            notes_data: {\n                data: note,\n                date: date\n            }\n        }))\n    }\n\n    return (\n        <>\n            <div style={{ display: \"flex\", flexDirection: \"column\", border: \"1px solid black\", padding: \"2rem\" }}>\n                <h1 className=\"para_header\">Application</h1>\n                {/* CV */}\n                <ApplicationInput\n                    appCardInput={job.cv}\n                    jobProperty=\"cv\"\n                    title={job.title}\n                    company={job.company}\n                    active={job.active}\n                    stage={job.stage}\n                />\n                {/* Cover Letter */}\n                <ApplicationInput\n                    appCardInput={job.cover_letter}\n                    jobProperty=\"cover_letter\"\n                    title={job.title}\n                    company={job.company}\n                    active={job.active}\n                    stage={job.stage}\n                />\n                {/* Add a new App Note */}\n                <h3>Notes</h3>\n                {!editing ? <button onClick={() => setEditing(true)}>Add Note</button> : <button onClick={handleAddAppNote}>Done</button>}\n                {editing ?\n                < textarea\n                    cols=\"30\"\n                    rows=\"10\"\n                    value={note}\n                    onChange={e => setNote(e.target.value)}\n                />\n                :\n                null\n                }\n                {/* Render all app notes */}\n                {\n                    job.application_notes.map(note => {\n                        return (\n                            <ApplicationNote key={note.id} applicationNote={note} />\n                        )\n                    })\n                }\n            </div>\n        </>\n    )\n}\n\nexport default ApplicationCard","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { updateInterview, deleteInterview } from '../../../data/Interviews/actions'\n\nconst Interview = ({ interview }) => {\n\n    let [editing, setEditing] = useState(false)\n    let [interviewDate, setInterviewDate] = useState(interview.interview_date)\n    let [format, setFormat] = useState(interview.format)\n    let [interviewer, setInterviewer] = useState(interview.interviewer)\n    let [notes, setNotes] = useState(interview.notes)\n    // the necessary ids to make updateInterview put and delete requests\n    const user_id = useSelector(state => state.user_id)\n    const interview_id = interview.id\n\n    // On development branch, data is nested within an extra data object:\n    const job_id = useSelector(state => state.job.data.data.id)\n    // In current deployment, it is not:\n    // const job_id = useSelector(state => state.job.data.id)\n\n    const access_token = useSelector(state => state.access_token)\n\n\n    const dispatch = useDispatch()\n\n    const handleUpdateInterview = e => {\n        e.preventDefault()\n\n        const data = {\n            interview_date: interviewDate,\n            format,\n            interviewer,\n            notes\n        }\n\n        dispatch(updateInterview({\n            user_id,\n            job_id,\n            interview_id,\n            access_token,\n            interview_data: { ...data },\n        }))\n\n        setEditing(false)\n    }\n\n    const handleDeleteInterview = () => {\n        dispatch(deleteInterview({\n            user_id,\n            job_id,\n            interview_id,\n            access_token\n        }))\n    }\n\n    return (\n        <>\n            <form onSubmit={handleUpdateInterview}>\n                <label\n                    className=\"label\"\n                    htmlFor=\"date\"\n                >Date: {editing ?\n                    <input\n                        type=\"date\"\n                        id=\"date\"\n                        value={interviewDate}\n                        onChange={e => setInterviewDate(e.target.value)}\n                    />\n                    :\n                    interviewDate\n                    }\n                </label>\n\n                <label\n                    className=\"label\"\n                    htmlFor=\"format\"\n                >Format: {editing ?\n\n                <select\n                id=\"format\"\n                value={format}\n                onChange={e => setFormat(e.target.value)}\n                >\n                    <option value=\"in_person\">In person</option>\n                    <option value=\"telephone\">Telephone</option>\n                    <option value=\"video_call\">Video Call</option>\n                    <option value=\"online_testing\">Online Test</option>\n                </select>\n                    :\n                    format\n                    }\n                </label>\n\n                <label\n                    className=\"label\"\n                    htmlFor=\"interviewer\"\n                >Interviewer: {editing ?\n                    <input\n                        type=\"text\"\n                        id=\"interviewer\"\n                        value={interviewer}\n                        onChange={e => setInterviewer(e.target.value)}\n                    />\n                    :\n                    interviewer\n                    }\n                </label>\n\n                <label\n                    className=\"label\"\n                    htmlFor=\"notes\"\n                >Notes: {editing ?\n                    <textarea\n                        cols=\"30\"\n                        rows=\"10\"\n                        type=\"text\"\n                        value={notes}\n                        onChange={e => setNotes(e.target.value)}\n                    />\n                    :\n                    notes\n                    }\n                </label>\n                <button type=\"submit\">Save</button>\n            </form>\n            {!editing && <button onClick={() => setEditing(true)}>Edit</button>}\n            <button onClick={handleDeleteInterview}>Delete</button>\n        </>\n    )\n}\n\nexport default Interview","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { addInterview } from '../../../data/Interviews/actions'\nimport Interview from './Interview'\nimport dateToday from '../../../helpers/dateToday.js'\n\nconst InterviewCard = ({ job }) => {\n    let [editing, setEditing] = useState(false)\n    let [interviewDate, setInterviewDate] = useState(job.interviews.interview_date)\n    let [format, setFormat] = useState(job.interviews.format)\n    let [interviewer, setInterviewer] = useState(job.interviews.interviewer)\n    let [notes, setNotes] = useState(job.interviews.notes)\n\n    const user_id = useSelector(state => state.user_id)\n    const job_id = useSelector(state => state.job.data.data.id)\n    const job_data = job\n    const access_token = useSelector(state => state.access_token)\n    const dispatch = useDispatch()\n\n    // These fields required by API, assigned values in intial state\n    let today = dateToday()\n    const initialState = {\n        interview_date: today,\n        format: \"in_person\",\n    }\n\n    const handleAddInterview = e => {\n        e.preventDefault()\n\n        // if format is undefined, assign it the value from initial state\n        if (!format) {\n            format = initialState.format\n        }\n\n        // if date is undefined, assign it the value from initial state\n        if (!interviewDate) {\n            interviewDate = initialState.interview_date\n        }\n\n        const data = {\n            interview_date: interviewDate,\n            format,\n            interviewer,\n            notes,\n        }\n\n        dispatch(addInterview({\n            user_id,\n            job_id,\n            access_token,\n            interview_data: { ...data },\n        }))\n\n        setEditing(false)\n    }\n\n    return (\n        <div style={{ display: \"flex\", flexDirection: \"column\", border: \"1px solid black\", padding: \"2rem\" }}>\n            <h1 className=\"para_header\">Interviews</h1>\n            <button onClick={() => setEditing(true)}>Add interview</button>\n            \n            { editing ?\n\n                <form onSubmit={handleAddInterview}>\n                <label\n                    className=\"label\"\n                    htmlFor=\"date\"\n                >Date:\n                    <input\n                        type=\"date\"\n                        id=\"date\"\n                        value={interviewDate}\n                        onChange={e => setInterviewDate(e.target.value)}\n                    />\n                </label>\n\n                <label\n                    className=\"label\"\n                    htmlFor=\"format\"\n                >Format: \n\n                <select\n                id=\"format\"\n                value={format}\n                onChange={e => setFormat(e.target.value)}\n                >\n                    <option value=\"in_person\">In person</option>\n                    <option value=\"telephone\">Telephone</option>\n                    <option value=\"video_call\">Video Call</option>\n                    <option value=\"online_testing\">Online Test</option>\n                </select>\n\n                </label>\n\n                <label\n                    className=\"label\"\n                    htmlFor=\"interviewer\"\n                >Interviewer: \n                    <input\n                        type=\"text\"\n                        id=\"interviewer\"\n                        value={interviewer}\n                        onChange={e => setInterviewer(e.target.value)}\n                    />\n\n                </label>\n\n                <label\n                    className=\"label\"\n                    htmlFor=\"notes\"\n                >Notes:\n                    <textarea\n                        cols=\"30\"\n                        rows=\"10\"\n                        type=\"text\"\n                        value={notes}\n                        onChange={e => setNotes(e.target.value)}\n                    />\n                </label>\n                <button type=\"submit\">Save</button>\n            </form>\n            \n            : null }\n\n\n            {job_data.interviews.map((interview, i) => {\n                return (\n                    <Interview key={i} interview={interview} />\n                )\n            })}\n        </div >\n    )\n}\n\nexport default InterviewCard","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { getSingleJob, deleteJob } from '../../data/Jobs/actions'\nimport Loading from '../Loading'\nimport JobDetailsCard from './JobDetailsCard'\nimport ApplicationCard from './ApplicationCard'\nimport InterviewCard from './InterviewCard'\nimport { Link } from \"react-router-dom\"\nimport Nav from '../Nav'\n\nconst Job = ({ match }) => {\n    const { jobs, job, loaded } = useSelector(state => state)\n    const { data: job_data } = job.data\n    const user_id = useSelector(state => state.user_id)\n    const job_id = match.params.id\n    const access_token = useSelector(state => state.access_token)\n    const dispatch = useDispatch()\n\n    // single job is fetched when component renders\n    useEffect(() => {\n        const data = {\n            user_id,\n            job_id,\n            access_token\n        }\n        dispatch(getSingleJob(data));\n    }, []);\n\n    // deletes single job\n    const handleDeleteJob = () => {\n        dispatch(deleteJob({\n            user_id,\n            job_id,\n            access_token\n        }))\n    }\n\n\n    return (\n        <>\n        <Nav />\n        { !loaded ?\n            <> \n            <Loading /> \n            </>\n        : \n        <>\n        <Link to=\"/mainpage\"> <button>Back</button></Link>\n        <button onClick={handleDeleteJob}>Delete Job</button>\n        <div style={{ display: \"flex\", width: \"70%\", margin: \"0 auto\", justifyContent: \"space-between\" }}>\n            <JobDetailsCard job={job_data} />\n            <ApplicationCard job={job_data} />\n            <InterviewCard job={job_data} />\n        </div>\n        </>\n        }\n        </>\n    )\n}\n\nexport default Job","import React from 'react';\nimport { useSelector } from 'react-redux'\nimport Nav from '../Nav'\n\nconst AccountHeader = () => {\n    const { name } = useSelector(state => state) \n    const initials = name.split(\" \").map((n)=>n[0]).join(\".\").toUpperCase()\n\n    return (\n        <>\n        <Nav />\n        <div>\n            <div>\n                { initials } \n            </div>\n            <h1>\n                { name }\n            </h1>\n        </div>\n        </>\n    );\n};\n\nexport default AccountHeader;","import {\n    updateAccount as apiUpdateAccount,\n    deleteAccount as apiDeleteAccount\n} from '../ApiRequests/account'\n\nimport {\n    ACCOUNT_PATCH_REQUEST,\n    ACCOUNT_PATCH_SUCCESS,\n    ACCOUNT_PATCH_FAILURE,\n    ACCOUNT_DELETE_REQUEST,\n    ACCOUNT_DELETE_SUCCESS,\n    ACCOUNT_DELETE_FAILURE\n} from './constants'\n\n// update single account detail\nexport const updateAccount = data => dispatch => {\n    return new Promise((resolve, reject) => {\n        dispatch(updateAccountRequest())\n        apiUpdateAccount(data)\n            .then(successResponse => {\n                dispatch(updateAccountSuccess(successResponse))\n                resolve(successResponse)\n            })\n            .catch(errorResponse => {\n                dispatch(updateAccountFailure(errorResponse))\n            })\n    })\n}\n\nconst updateAccountRequest = () => dispatch => {\n    dispatch({\n        type: ACCOUNT_PATCH_REQUEST,\n    })\n}\n\nconst updateAccountSuccess = data => dispatch => {\n    dispatch({\n        type: ACCOUNT_PATCH_SUCCESS,\n        payload: data\n    })\n}\n\nconst updateAccountFailure = error => dispatch => {\n    dispatch({\n        type: ACCOUNT_PATCH_FAILURE,\n        payload: error,\n    })\n}\n\n// delete user account\nexport const deleteAccount = data => dispatch => {\n    return new Promise((resolve, reject) => {\n        dispatch(deleteAccountRequest())\n        apiDeleteAccount(data)\n            .then(successResponse => {\n                dispatch(deleteAccountSuccess(data.user_id))\n                resolve(successResponse)\n            })\n            .catch(errorResponse => {\n                dispatch(deleteAccountFailure(errorResponse))\n            })\n    })\n}\n\nconst deleteAccountRequest = () => dispatch => {\n    dispatch({\n        type: ACCOUNT_DELETE_REQUEST\n    })\n}\n\nconst deleteAccountSuccess = data => dispatch => {\n    dispatch({\n        type: ACCOUNT_DELETE_SUCCESS,\n        payload: data,\n    })\n}\n\nconst deleteAccountFailure = error => dispatch => {\n    dispatch({\n        type: ACCOUNT_DELETE_FAILURE,\n        payload: error\n    })\n}","import axios from '../axios'\n\n// user patch request\nexport const updateAccount = data => {\n    const { user_id, account_data, access_token } = data\n    return axios.patch(`user/${user_id}`, account_data, {\n        headers: {\n            'Authorization': `Bearer ${access_token}`\n        }\n    })\n}\n\n// user delete request\nexport const deleteAccount = data => {\n    const { user_id, access_token } = data\n    return axios.delete(`user/${user_id}`, {\n        headers: {\n            'Authorization': `Bearer ${access_token}`\n        }\n    })\n}","// account patch request\nexport const ACCOUNT_PATCH_REQUEST = 'ACCOUNT_PATCH_REQUEST'\n\nexport const ACCOUNT_PATCH_SUCCESS = 'ACCOUNT_PATCH_SUCCESS'\n\nexport const ACCOUNT_PATCH_FAILURE = 'ACCOUNT_PATCH_FAILURE'\n\n// account delete request\nexport const ACCOUNT_DELETE_REQUEST = 'ACCOUNT_DELETE_REQUEST'\n\nexport const ACCOUNT_DELETE_SUCCESS = 'ACCOUNT_DELETE_SUCCESS'\n\nexport const ACCOUNT_DELETE_FAILURE = 'ACCOUNT_DELETE_FAILURE'","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { updateAccount } from '../../data/Account/actions'\n\nconst AccountDetail = ({ accountDetailName, value }) => {\n    const [editing, setEditing] = useState(false)\n    const [accountInputValue, setAccountInputValue] = useState(value)\n    const { user_id, name } = useSelector(state => state)\n    const { access_token } = useSelector(state => state)\n    const dispatch = useDispatch()\n\n    // dispatches action that updates user's account details\n    const handleUpdateAccount = () => {\n        dispatch(updateAccount({\n            user_id,\n            name,\n            access_token,\n            account_data: {\n                [accountDetailName]: accountInputValue\n            }\n        }))\n\n        setEditing(false)\n    }\n\n    return (\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n            {editing ?\n                <input\n                    id={accountDetailName}\n                    value={accountInputValue}\n                    onChange={e => setAccountInputValue(e.target.value)}\n                />\n                :\n                <p>{accountInputValue}</p>\n            }\n            {editing ?\n                <button onClick={handleUpdateAccount}>Save</button>\n                :\n                <button onClick={() => setEditing(true)}>Edit</button>\n            }\n        </div>\n    )\n}\n\nexport default AccountDetail","import React, { useEffect } from 'react'\nimport AccountHeader from './AccountHeader'\nimport AccountDetail from './AccountDetail'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { deleteAccount } from '../../data/Account/actions'\nimport { resetAuthResponse } from '../../data/Auth/actions'\nimport checkmark from '../../assets/images/done-24px.svg'\n\nconst Account = ( data ) => {\n    const { user_id, access_token, loaded, name, email } = useSelector(state => state)\n    const errors = useSelector(state => state.errors)\n\n    const dispatch = useDispatch()\n\n    // resets authResponse global state property every time component renders\n    useEffect(() => {\n        dispatch(resetAuthResponse())\n    }, [])\n\n    // disptaches action to delete user's account\n    const handleDeleteAccount = () => {\n        dispatch(deleteAccount({ user_id, access_token }))\n    }\n\n    return (\n        <>\n        { access_token ? \n        <>\n            <AccountHeader />\n            <p>{ errors.message }</p>\n            <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr\", width: \"30rem\", margin: \"0 auto\" }}>\n                <AccountDetail\n                    accountDetailName=\"email\"\n                    value={ email }\n                />\n                <AccountDetail\n                    accountDetailName=\"name\"\n                    value={ name }\n                />\n                <button onClick={handleDeleteAccount}>DELETE MY ACCOUNT</button>\n            </div>\n                            \n\n        </>\n        :  \n        <>\n            <img className=\"check-icon\" src={checkmark} alt=\"green checkmark\"></img>\n            <h1 className=\"headline\">Account Deleted</h1>\n            <Link to=\"/home\"> \n                <button className=\"primarybtn\">\n                    RETURN HOME\n                </button>\n            </Link>\n            </>\n        }\n        \n        </>\n    )\n}\n\nexport default Account","import React from 'react'\nimport Nav from './Nav'\n\nconst FourOhFour = ({ history }) => {\n    return (\n        <> <Nav />\n        <div>\n            Oops, no page exists for this route.\n            <button onClick={history.goBack}>Go back</button>\n        </div> </>\n    )\n}\n\nexport default FourOhFour","import React from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport { QueryParamProvider } from 'use-query-params'\nimport PrivateRoute from './PrivateRoute'\nimport Home from './Home'\nimport Login from './AuthForms/Login'\nimport SignUp from './AuthForms/SignUp'\nimport Logout from './AuthForms/Logout'\nimport ForgotPassword from './AuthForms/ForgotPassword'\nimport PasswordReset from './AuthForms/PasswordReset'\nimport MainPage from './MainPage/MainPage'\nimport Job from './Job/Job'\nimport Account from './Account/Account'\nimport FourOhFour from './FourOhFour'\n\nconst App = () => (\n  <BrowserRouter>\n    <QueryParamProvider ReactRouterRoute={Route}>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/home\" component={Home} />\n        <Route exact path=\"/home/login\" component={Login} />\n        <Route exact path=\"/home/signup\" component={SignUp} />\n        <Route exact path=\"/home/logout\" component={Logout} />\n        <Route path=\"/forgot-password\" component={ForgotPassword} />\n        <Route path=\"/password-reset/\" component={PasswordReset} />\n        <PrivateRoute path=\"/mainpage\" component={MainPage} />\n        <PrivateRoute path=\"/jobs/:id\" component={Job} />\n        <PrivateRoute path=\"/account\" component={Account} />\n        <Route component={FourOhFour} />\n      </Switch>\n    </QueryParamProvider>\n  </BrowserRouter>\n)\n\nexport default App","import {\n    JOBS_GET_REQUEST,\n    JOBS_GET_SUCCESS,\n    JOBS_GET_FAILURE,\n    SINGLE_JOB_GET_REQUEST,\n    SINGLE_JOB_GET_SUCCESS,\n    SINGLE_JOB_GET_FAILURE,\n    SINGLE_JOB_POST_REQUEST,\n    SINGLE_JOB_POST_SUCCESS,\n    SINGLE_JOB_POST_FAILURE,\n    SINGLE_JOB_PATCH_REQUEST,\n    SINGLE_JOB_PATCH_SUCCESS,\n    SINGLE_JOB_PATCH_FAILURE,\n    SINGLE_JOB_DELETE_REQUEST,\n    SINGLE_JOB_DELETE_SUCCESS,\n    SINGLE_JOB_DELETE_FAILURE\n} from './constants'\nimport { initialState } from '../RootReducer'\n\nexport default (state, action) => {\n    const { type, payload } = action\n    switch (type) {\n        case JOBS_GET_REQUEST:\n            return {\n                ...state,\n                loaded: false\n            }\n        case JOBS_GET_SUCCESS:\n            return {\n                ...state,\n                jobs: [...payload],\n                loaded: true\n            }\n        case JOBS_GET_FAILURE:\n            return {\n                ...state,\n                loaded: true,\n                errors: payload\n            }\n        case SINGLE_JOB_GET_REQUEST:\n            return {\n                ...state,\n                loaded: false\n            }\n        case SINGLE_JOB_GET_SUCCESS:\n            return {\n                ...state,\n                job: {\n                    ...payload\n                },\n                loaded: true\n            }\n        case SINGLE_JOB_GET_FAILURE:\n            return {\n                ...state,\n                loaded: true,\n                errors: payload\n            }\n        case SINGLE_JOB_POST_REQUEST:\n            return {\n                ...state,\n                loaded: false,\n                job_id: \"\",\n            }\n        case SINGLE_JOB_POST_SUCCESS:\n            return {\n                ...state,\n                jobs: [\n                    ...state.jobs,\n                    payload.data.data\n                ],\n                job_id: payload.data.data.id,\n                loaded: true\n            }\n        case SINGLE_JOB_POST_FAILURE:\n            return {\n                ...state,\n                loaded: true,\n                errors: payload\n            }\n        case SINGLE_JOB_PATCH_REQUEST:\n            return {\n                ...state,\n                loaded: false\n            }\n        case SINGLE_JOB_PATCH_SUCCESS:\n            return {\n                ...state,\n                job: { ...payload },\n                loaded: true\n            }\n        case SINGLE_JOB_PATCH_FAILURE:\n            return {\n                ...state,\n                loaded: true,\n                errors: payload\n            }\n        case SINGLE_JOB_DELETE_REQUEST:\n            return {\n                ...state,\n                loaded: false\n            }\n        case SINGLE_JOB_DELETE_SUCCESS:\n            return {\n                ...state,\n                jobs: state.jobs.filter(job => job.id !== payload),\n                job: { ...initialState.job },\n                loaded: true\n            }\n        case SINGLE_JOB_DELETE_FAILURE:\n            return {\n                ...state,\n                loaded: true,\n                errors: payload\n            }\n        default:\n            return {}\n    }\n}","import {\n    RESET_AUTH_RESPONSE,\n    RESET_ERRORS,\n    SIGNUP_POST_REQUEST,\n    SIGNUP_POST_SUCCESS,\n    SIGNUP_POST_FAILURE,\n    LOGIN_POST_REQUEST,\n    LOGIN_POST_SUCCESS,\n    LOGIN_POST_FAILURE,\n    FORGOT_PASSWORD_INIT_POST_REQUEST,\n    FORGOT_PASSWORD_INIT_POST_SUCCESS,\n    FORGOT_PASSWORD_INIT_POST_FAILURE,\n    PASSWORD_RESET_POST_REQUEST,\n    PASSWORD_RESET_POST_SUCCESS,\n    PASSWORD_RESET_POST_FAILURE,\n    LOGOUT\n} from './constants'\nimport { initialState } from '../RootReducer'\n\nexport default (state, action) => {\n    const { type, payload } = action\n    switch (type) {\n        case RESET_ERRORS:\n            return {\n                ...state,\n                errors: {}\n            }\n        case RESET_AUTH_RESPONSE:\n            return {\n                ...state,\n                authResponse: null,\n                errors: {}\n            }\n        case SIGNUP_POST_REQUEST:\n            return {\n                ...state,\n                authResponse: 'Loading...',\n            }\n        case SIGNUP_POST_SUCCESS:\n            const access_token = payload.data.success.token\n            return {\n                ...state,\n                authResponse: 'Signup successful! Logging in...',\n                user: { ...payload.data.user, access_token },\n                user_id: payload.data.user.id,\n                name: payload.data.user.name,\n                email: payload.data.user.email,\n                access_token: access_token\n            }\n        case SIGNUP_POST_FAILURE:\n            return {\n                ...state,\n                errors: payload,\n            }\n        case LOGIN_POST_REQUEST:\n            return {\n                ...state,\n                authResponse: 'Loading...'\n            }\n        case LOGIN_POST_SUCCESS:\n            return {\n                ...state,\n                authResponse: 'Redirecting you to dashboard...',\n                user: payload,\n                user_id: payload.user.id,\n                name: payload.user.name,\n                email: payload.user.email,\n                access_token: payload.access_token\n     \n            }\n        case LOGIN_POST_FAILURE:\n            return {\n                ...state,\n                errors: payload,\n                authResponse: payload.message\n            }\n        case FORGOT_PASSWORD_INIT_POST_REQUEST:\n            return {\n                ...state,\n                authResponse: 'Loading...'\n            }\n        case FORGOT_PASSWORD_INIT_POST_SUCCESS:\n            return {\n                ...state,\n                authResponse: 'Password reset request successful. Please check your email.'\n            }\n        case FORGOT_PASSWORD_INIT_POST_FAILURE:\n            return {\n                ...state,\n                errors: payload\n            }\n        case PASSWORD_RESET_POST_REQUEST:\n            return {\n                ...state,\n                loaded: false\n            }\n        case PASSWORD_RESET_POST_SUCCESS:\n            return {\n                ...state,\n                user: { ...payload },\n                loaded: true\n            }\n        case PASSWORD_RESET_POST_FAILURE:\n            return {\n                ...state,\n                errors: payload,\n                loaded: true\n            }\n        case LOGOUT:\n            return {\n                ...initialState,\n                authResponse: 'Successfully logged out',\n                loaded: true,\n            }\n        default:\n            return {}\n    }\n}","import {\n    ACCOUNT_PATCH_REQUEST,\n    ACCOUNT_PATCH_SUCCESS,\n    ACCOUNT_PATCH_FAILURE,\n    ACCOUNT_DELETE_REQUEST,\n    ACCOUNT_DELETE_SUCCESS,\n    ACCOUNT_DELETE_FAILURE\n} from './constants'\n\nexport default (state, action) => {\n    const { type, payload } = action\n    switch (type) {\n        case ACCOUNT_PATCH_REQUEST:\n            return {\n                ...state,\n                errors: {},\n                loaded: false,\n            }\n        case ACCOUNT_PATCH_SUCCESS:\n            return {\n                ...state,\n                loaded: true,\n                name: payload.data.user.name,\n                email: payload.data.user.email,\n            }\n        case ACCOUNT_PATCH_FAILURE:\n            return {\n                ...state,\n                errors: payload,\n                loaded: true,\n\n            }\n        case ACCOUNT_DELETE_REQUEST:\n            return {\n                ...state,\n                errors: {},\n                loaded: false\n            }\n        case ACCOUNT_DELETE_SUCCESS:\n            return {\n                ...state,\n                user: \"\",\n                name: \"\",\n                authResponse: \"Account Deleted!\",\n                user_id: \"\",\n                access_token: \"\", \n                loaded: true\n            }\n        case ACCOUNT_DELETE_FAILURE:\n            return {\n                ...state,\n                loaded: true,\n                errors: payload\n            }\n        default:\n            return {}\n    }\n}","import {\n    APPLICATION_NOTE_POST_REQUEST,\n    APPLICATION_NOTE_POST_SUCCESS,\n    APPLICATION_NOTE_POST_FAILURE,\n    APPLICATION_NOTE_PATCH_REQUEST,\n    APPLICATION_NOTE_PATCH_SUCCESS,\n    APPLICATION_NOTE_PATCH_FAILURE,\n    APPLICATION_NOTE_DELETE_REQUEST,\n    APPLICATION_NOTE_DELETE_SUCCESS,\n    APPLICATION_NOTE_DELETE_FAILURE\n} from './constants'\n\nexport default (state, action) => {\n    const { type, payload } = action\n    switch (type) {\n        case APPLICATION_NOTE_POST_REQUEST:\n            return {\n                ...state,\n                loaded: false\n            }\n        case APPLICATION_NOTE_POST_SUCCESS:\n            return {\n                ...state,\n                job: {\n                    ...state.job,\n                    data: {\n                        ...state.job.data,\n                        data: {\n                            ...state.job.data.data,\n                            application_notes: [...state.job.data.data.application_notes, payload]\n                        }\n                        \n                    },\n                },\n                loaded: true\n            }\n        case APPLICATION_NOTE_POST_FAILURE:\n            return {\n                ...state,\n                loaded: true,\n                errors: payload\n            }\n        case APPLICATION_NOTE_PATCH_REQUEST:\n            return {\n                ...state,\n                loaded: false\n            }\n        case APPLICATION_NOTE_PATCH_SUCCESS:\n            return {\n                ...state,\n                job: {\n                    ...state.job,\n                    data: {\n                        ...state.job.data,\n                        data: {\n                            ...state.job.data.data,\n                            application_notes: state.job.data.data.application_notes.map(note => note.id === payload.id ? payload : note)\n                        }\n                    },\n                },\n                loaded: true\n            }\n        case APPLICATION_NOTE_PATCH_FAILURE:\n            return {\n                ...state,\n                loaded: true,\n                errors: payload\n            }\n        case APPLICATION_NOTE_DELETE_REQUEST:\n            return {\n                ...state,\n                loaded: false\n            }\n        case APPLICATION_NOTE_DELETE_SUCCESS:\n            return {\n                ...state,\n                job: {\n                    ...state.job,\n                    data: {\n                        ...state.job.data,\n                        data: {\n                            ...state.job.data.data,\n                            application_notes: state.job.data.data.application_notes.filter(note => note.id !== payload)\n                        }\n                    },\n                },\n                loaded: true\n            }\n        case APPLICATION_NOTE_DELETE_FAILURE:\n            return {\n                ...state,\n                loaded: true,\n                errors: payload\n            }\n        default:\n            return {}\n    }\n}","import {\n    INTERVIEW_POST_REQUEST,\n    INTERVIEW_POST_SUCCESS,\n    INTERVIEW_POST_FAILURE,\n    INTERVIEW_PATCH_REQUEST,\n    INTERVIEW_PATCH_SUCCESS,\n    INTERVIEW_PATCH_FAILURE,\n    INTERVIEW_DELETE_REQUEST,\n    INTERVIEW_DELETE_SUCCESS,\n    INTERVIEW_DELETE_FAILURE\n} from './constants'\n\nexport default (state, action) => {\n    const { type, payload } = action\n    switch (type) {\n        case INTERVIEW_POST_REQUEST:\n            return {\n                ...state,\n                loaded: false\n            }\n        case INTERVIEW_POST_SUCCESS:\n            return {\n                ...state,\n                job: {\n                    ...state.job,\n                    data: {\n                        ...state.job.data,\n                        data: {\n                            ...state.job.data.data,\n                            interviews: [...state.job.data.data.interviews, payload.data.data]\n                        }\n                    },\n                },\n                loaded: true\n            }\n        case INTERVIEW_POST_FAILURE:\n            return {\n                ...state,\n                loaded: true,\n                errors: payload\n            }\n        case INTERVIEW_PATCH_REQUEST:\n            return {\n                ...state,\n                loaded: false\n            }\n        case INTERVIEW_PATCH_SUCCESS:\n            return {\n                ...state,\n                job: {\n                    ...state.job,\n                    data: {\n                        ...state.job.data,\n                        data: {\n                            ...state.job.data.data,\n                            interviews: state.job.data.data.interviews.map(interview => interview.id === payload.id ? payload : interview)\n                        }\n                    },\n\n                },\n                loaded: true\n            }\n        case INTERVIEW_PATCH_FAILURE:\n            return {\n                ...state,\n                loaded: true,\n                errors: payload\n            }\n        case INTERVIEW_DELETE_REQUEST:\n            return {\n                ...state,\n                loaded: false\n            }\n        case INTERVIEW_DELETE_SUCCESS:\n            return {\n                ...state,\n                job: {\n                    ...state.job,\n                    data: {\n                        ...state.job.data,\n                        data: {\n                            ...state.job.data.data,\n                            interviews: state.job.data.data.interviews.filter(interview => interview.id !== payload)\n                        },\n                    },\n                },\n                loaded: true\n            }\n        case INTERVIEW_DELETE_FAILURE:\n            return {\n                ...state,\n                loaded: true,\n                errors: payload\n            }\n        default:\n            return {}\n    }\n}","import { default as JobReducer } from './Jobs/reducer'\nimport { default as AuthReducer } from './Auth/reducer'\nimport { default as AccountReducer } from './Account/reducer'\nimport { default as AppNotesReducer } from './AppNotes/reducer'\nimport { default as InterviewsReducer } from './Interviews/reducer'\n\nexport const initialState = {\n    jobs: [\n       \n\n    ],\n    // We must define the 'job' object in initial state.\n    // This is because when the user visits the single job page, the Job.js component uses the job object to render, and does not request the API until the component has mounted.\n    // API data (in format determined by laravel API)\n    job: {\n        data: {\n            data: {\n                id: \"\",\n                title: \"\",\n                company: \"\",\n                active: \"\",\n                location: \"\",\n                salaray: \"\",\n                closing_date: \"\",\n                date_applied: \"\",\n                description: \"\",\n                stage: \"\",\n                interviews: [],\n                application_notes: []\n            }\n        },\n    },\n    user: {\n        token_type: \"Bearer\",\n        expires_in: \"31536000\",\n        access_token: null,\n        refresh_token: null,\n        user: {\n            id: \"\",\n            name: \"\",\n            email: \"\",\n            created_at: \"2020-09-01 14:22:46\"\n        }\n    },\n    authResponse: null,\n    loaded: true,\n    errors: {},\n    name: \"\",\n    email: \"\",\n    job_id: \"\",\n    user_id: \"\",\n    access_token: null,\n}\n\nconst RootReducer = (state = initialState, action) => ({\n    ...state,\n    ...JobReducer(state, action, initialState),\n    ...AuthReducer(state, action, initialState),\n    ...AccountReducer(state, action, initialState),\n    ...AppNotesReducer(state, action, initialState),\n    ...InterviewsReducer(state, action, initialState),\n})\n\nexport default RootReducer","import RootReducer from \"./RootReducer\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport persistState from \"redux-localstorage\";\n\nconst composeEnhancers =\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n    RootReducer,\n    composeEnhancers(applyMiddleware(thunk), persistState()),\n);\n\n// const store = createStore(\n//     reducer,\n//     initial,\n//     composeEnhancers(applyMiddleware(thunk))\n// );\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/styles.min.css';\nimport App from './components/App';\n\n// provider and store\nimport { Provider } from \"react-redux\";\nimport store from \"./data/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);","module.exports = __webpack_public_path__ + \"static/media/done-24px.ce59afd4.svg\";","module.exports = __webpack_public_path__ + \"static/media/email_icon.6186b4f4.svg\";","module.exports = __webpack_public_path__ + \"static/media/lock_icon.1c126a7d.svg\";","module.exports = __webpack_public_path__ + \"static/media/add-task-24px.3a6c2396.svg\";","module.exports = __webpack_public_path__ + \"static/media/timeline-24px.77caa0ac.svg\";","module.exports = __webpack_public_path__ + \"static/media/work-24px.a1b47ba4.svg\";"],"sourceRoot":""}